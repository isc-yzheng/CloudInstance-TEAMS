/* Copyright (c) 2020 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

/// RecordMapper Development Page.
/// This page lets users construct a RecordMap definition (used to pull data
/// out of flat files and map them into an object representation).
Class EnsPortal.RecordMapper Extends EnsPortal.Template.devPage [ System = 4 ]
{

Parameter JSINCLUDES = "zenCSLM.js";

Parameter CSSINCLUDES = "ensemble/Ensemble_RecordMapper.css";

/// Displayed name of this page.
Parameter PAGENAME = "Record Mapper";

/// If this page has multiple views, this is its initial display mode.
Parameter DEFAULTVIEWMODE = "list";

/// User needs READ permissions on either the %Ens_Code or the %Ens_RecordMap resource to view this page.
Parameter RESOURCE = "%Ens_Code:READ,%Ens_RecordMap:READ";

/// User needs WRITE permissions on either the %Ens_Code or the %Ens_RecordMap resource to make changes on this page.
Parameter EDITRESOURCE = "%Ens_Code:WRITE,%Ens_RecordMap:WRITE";

/// Name of RecordMap being viewed.
Property recordMap As %ZEN.Datatype.string(ZENURL = "MAP");

Property recordAsName As %ZEN.Datatype.string;

/// Name of current sample file (on server).
Property sampleFile As %ZEN.Datatype.string(ZENURL = "sampleFile");

/// ID (index number, 0-based) of current selected item.
Property currItem As %ZEN.Datatype.integer [ InitialExpression = -1 ];

/// CSV-string used to remember last location across page redraws, especially involving popups.
Property lastLoc As %ZEN.Datatype.string(ZENURL = "LOC");

/// Flag to indicate whether the sample file should be displayed.
Property showSample As %ZEN.Datatype.boolean(ZENURL = "SHOWSAMPLE") [ InitialExpression = 1 ];

/// Property to temporarily contain model during page load.
Property %map As EnsLib.RecordMap.Model.Record;

/// Type of the current selected item.
Property currItemType As %ZEN.Datatype.string;

/// Temporary flag to indicate when a new item has been added to the RecordMap.
/// The flag is used to ensure the item is selected after being created, by stopping
/// the row containing the "add" button from selected after creating the new item.
Property blockSuperEvent As %ZEN.Datatype.integer;

/// List of classes generated by a given RecordMap after the Generate option is selected.
Property generatedClasses As list Of %ZEN.Datatype.string;

/// Is the user permitted to access the fileSelect popup.
Property canViewFileSystem As %Boolean [ InitialExpression = {$system.Security.Check("%Ens_ViewFileSystem","USE")} ];

Property msgMakeComposite As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Make Composite")} ];

Property msgMakeCompositeTooltip As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Click to make this field a composite")} ];

Property msgAddSeparator As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Add Separator")} ];

Property tipAddField As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Add a new field")} ];

Property tipRemoveItem As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Remove this item")} ];

Property tipMoveItemUp As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Move this item up")} ];

Property tipMoveItemDown As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Move this item down")} ];

Property errNameCollision As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("Name already exists: %1")} ];

Property msgDocReadOnly As %ZEN.Datatype.caption [ InitialExpression = {$$$TextJS("This record map is read only")} ];

Property tipOpen As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Open a saved record map")} ];

Property tipNew As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Create a new record map")} ];

Property tipSave As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Save this record map")} ];

Property tipSaveAs As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Save this record map with a new name")} ];

Property tipGen As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Save this record map and generate target")} ];

Property tipDelete As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Delete the current RecordMap")} ];

Property tipCSVWizard As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Create a record map from a CSV-style sample")} ];

/// This Style block contains page-specific CSS style definitions.
/// yellow background:F3E9A2
XData Style
{
<style type="text/css">

#editorPane {
	position: relative;
	padding-left:4px;
	border-bottom:1px solid black;
}
#mapTableHeader {
	height: 40px;
	top: 0px;
	background: #F0F0F0;
	overflow: hidden;
}
#mainForm {
	overflow-y: auto;
}

#modelTableBody {
	border-top: 1px solid rgb(156,154,141);
	border-bottom: 1px solid rgb(156,154,141); 
	overflow: auto;
	background: white;
}
#displayTable_wrapperDiv {
	overflow: auto;
}

/* cell in sample output */
span.cell {
	border-left: 1px solid black;
	border-bottom: 1px solid black;
}

table.mapTable {
	background: white;
	width: 100%;
}

table.mapTable td {
	padding: 2px;
	border-bottom: 1px solid darkgray;
}

span.selector {
	visibility: hidden;
}

.modelRecordMapSelected span.selector,
.modelRecordFieldSelected span.selector {
	visibility: visible;
}

.modelRecordMap {
	color: rgb(67,67,67);
	font-size: 1.2em;
	font-weight: bold;
	background: #D0D0FF;
}
.modelRecordMapSelected {
	color:black;
	font-size: 1.2em;
	font-weight: bold;
	background: #FFEEAA;
}

.modelRecordField {
	color: rgb(67,67,67);
}
.modelRecordFieldSelected {
	color:black;
	background: #FFEEAA;
}

.modelRecordComposite {
	font-style: italic;
	color: rgb(67,67,67);
}
.modelRecordCompositeSelected {
	font-style: italic;
	color:black;
	background: #FFEEAA;
}
.modelButton {
	width: 5%;
}
.modelSpacerCell {
	width: 10%;
}
.modelRowDetail {
	opacity: 0.8;
	font-size: 0.75em;
	padding-left: 5px;
	font-style: normal;
}

.hdrLink {
	font-size: 10pt;
	font-weight: normal;
	color: #78b6dc;
	text-decoration: none;
	padding-left: 6px;
	padding-right: 6px;
}

.saveError {
	background: red;
}
.radioButtonCaption {
	text-decoration: none;
	color: #434343;
	font-size: 10pt;
}
.radioButtonCaption:visited {
	color: #434343;
}
.otherTextLabel {
	padding-right: 3px;
}
.charGroup {
	border: 1px solid gray;
	padding: 3px;
}
.linkAnchor {
	text-decoration: none;
	font-weight: bold;
}
.linkImage {
	vertical-align: bottom;
}
.imageLink.mapImage, .imageLink.mapImage:hover {
	vertical-align: baseline;
}
#recAllowEarlyTerminator, #recComplexBatchManaged {
	display: inline;
}
</style>
}

XData contentPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<pane xmlns="http://www.intersystems.com/zen">
<jsonProvider id="record" 
	OnGetTargetObject="GetRecordDefinition"
	OnSubmitContent="SubmitHandler" targetClass="EnsLib.RecordMap.Model.Record">
	<parameter id="RecordMapName" paramName="RecordMapName" value="" />
</jsonProvider>

<hgroup id="mainGroup" cellVAlign="top">
<vgroup id="editorPane">
<pane enclosingStyle="width:99%; height:100%;border-style: solid; border-width: 1px; border-color:black;">
<html id="mapSample" OnDrawContent="DrawSampleData" />
</pane>
<html id="mapTableHeader" OnDrawContent="DrawTableHeader"></html>
<html id="modelTableBody"></html>
</vgroup>

<vgroup id="propertyPane" hidden="true">
<label id="idPropertyTitle" label="RecordMap" labelClass="labelText" labelStyle="white-space:nowrap;" containerStyle="background:#9c9a8c;color:white;font-size:14pt;padding-left:10px;line-height:24px; width:400px;"/>

<form id="mainForm">
<vgroup id="id1" hidden="true" cellStyle="padding:3px;" enclosingStyle="padding:10px;">
<text id="recTargetClassname" label="Target Classname" size="44" title="Classname for the generated message class" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<hgroup>
<selector id="recBatchClass" label="Batch Class" size="35" context="Ens/Classes?super=EnsLib.RecordMap.Batch&amp;system=0" title="Name of a specific batch class which should be used for this RecordMap" onchange="zenPage.applyDetails();zenPage.onBatchClassChange();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<spacer width="5px" />
<vgroup>
<spacer height="5px" />
<image id="recSimpleBatchEdit" onclick="zenPage.editSimpleBatch();" src="deepsee/next_24.png"/>
</vgroup>
</hgroup>
<hgroup>
<select id="recType" label="Type" showEmpty="false" valueList="delimited,fixedwidth" displayList="Delimited,Fixed Width" 
onchange="if (!zenPage.onRecordTypeChange(zenThis.value,true)) { return false; } zenPage.applyDetails();" value="delimited" title="Structure of data in file" />
<text id="recEncoding" label="Character Encoding" size="15" containerStyle="padding-left:15px;" title="Character set of the external data" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<checkbox id="recPadFromLeft" label="Right justify" containerStyle="padding-left:15px;" title="Padding characters should appear left of data in fields" onchange="zenPage.applyDetails();"/>
</hgroup>
<textarea id="recAnnotation" label="Annotation" cols="40" rows="4" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<textarea id="recLabel" label="Leading data" cols="40" title="Static characters which appear before any data" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<group id="recPadCharGroup" label="Padding Character" title="Character used for padding fields" labelPosition="left" cellVAlign="bottom" enclosingClass="charGroup" layout="horizontal">
<radioButton id="recPadding_None" name="recPadding" optionValue="" caption="None" title="No padding character" captionClass="radioButtonCaption" onclick="zenPage.onPaddingCharChange(zenThis.optionValue, true);" />
<radioButton id="recPadding_Space" name="recPadding" optionValue="\x20" value="0" caption="Space"  title="Space" captionClass="radioButtonCaption" onclick="zenPage.onPaddingCharChange(zenThis.optionValue, true);" />
<radioButton id="recPadding_Tab" name="recPadding" optionValue="\x09" value="0" caption="Tab" title="Tab" captionClass="radioButtonCaption" onclick="zenPage.onPaddingCharChange(zenThis.optionValue, true);" />
<text id="recPadding_Other" label="Other" labelClass="radioButtonCaption otherTextLabel" title="Other character - control characters must be represented in hex e.g. \x20 for space" size="8" onchange="zenPage.onPaddingCharChange(zenThis.value, false);" labelStyle="padding-left: 3px;" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<text id="recPaddingChars" hidden="true" onchange="zenPage.applyDetails();" />
</group>
<group id="recTermGroup" label="Record Terminator" title="Character or characters used to indicate the end of a record" labelPosition="left" cellVAlign="bottom" enclosingClass="charGroup" layout="horizontal" >
<radioButton id="recTerm_None" name="recTerm" optionValue="" caption="None" title="No terminator character" captionClass="radioButtonCaption" onclick="zenPage.onRecTermChange(zenThis.optionValue, true);" />
<radioButton id="recTerm_CRLF" name="recTerm" optionValue="\x0d\x0a" caption="CRLF" title="Carriage Return, Line Feed" captionClass="radioButtonCaption" onclick="zenPage.onRecTermChange(zenThis.optionValue, true);" />
<radioButton id="recTerm_CR" name="recTerm" optionValue="\x0d" caption="CR" title="Carriage Return" captionClass="radioButtonCaption" onclick="zenPage.onRecTermChange(zenThis.optionValue, true);" />
<radioButton id="recTerm_LF" name="recTerm" optionValue="\x0a" caption="LF" title="Line Feed" captionClass="radioButtonCaption" onclick="zenPage.onRecTermChange(zenThis.optionValue, true);" />
<spacer width="5px" />
<text id="recTerm_Other" label="Other" labelClass="radioButtonCaption otherTextLabel" title="Other character - control characters must be represented in hex e.g. \x20 for space" size="6" onchange="zenPage.onRecTermChange(zenThis.value, false);" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<text id="recRecordTerminator" hidden="true" onchange="zenPage.applyDetails();" />
</group>
<checkbox id="recAllowEarlyTerminator" label="Allow Early Terminator" title="Flag to control whether an early terminator is allowed" onchange="zenPage.applyDetails();" enclosingClass="checkboxControl" />
<checkbox id="recComplexBatchManaged" label="Allow Complex Record Mapping" title="Flag to control whether this record type can be used in Complex RecordMaps" onchange="zenPage.applyDetails();" enclosingClass="checkboxControl" />
<text id="recFieldSeparator" label="Field separator" title="Single character used between fields in fixed width records - control characters must be represented in hex e.g. \x20 for space" size="44" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<vgroup id="recSeparators" label="Field separator(s)" title="Characters used to separate values in delimited records. The order here determines the parse hierarchy" enclosingClass="charGroup">
<html id="addSepButton"><a id="addSepButtonLink" href="#" class="zenLabel linkAnchor" onclick="zenPage.addSeparator('');return false;" title="#(%page.msgAddSeparator)#">#(%page.msgAddSeparator)# <img class="linkImage" src="deepsee/add_24.png" width="20px" height="20px" /></a></html>
</vgroup>
<hgroup>
<text id="recRepeatSeparator" label="Repeat separator" title="Repeat separator used to delimit repeating fields - control characters must be represented in hex e.g. \x20 for space" size="6" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<spacer width="10px" height="15px" />
</hgroup>
<group id="recEscapingGroup" label="Quoting" title="Enable quote-style escaping" labelPosition="left" cellVAlign="bottom" enclosingClass="charGroup">
<vgroup>
<hgroup>
<radioButton id="recEscaping_None" name="recEscaping" optionValue="" caption="None" title="No escaping" captionClass="radioButtonCaption" onclick="zenPage.onRecEscapingChange(zenThis.optionValue);"/>
<radioButton id="recEscaping_Quote" name="recEscaping" optionValue="quote" caption="Quote Escaping" title="Use quote characters to escape separators appearing in data" captionClass="radioButtonCaption" onclick="zenPage.onRecEscapingChange(zenThis.optionValue);"/>
<radioButton id="recEscaping_All" name="recEscaping" optionValue="all" caption="Quote All" title="Use quote characters around all fields on output" captionClass="radioButtonCaption" onclick="zenPage.onRecEscapingChange(zenThis.optionValue);"/>
</hgroup>
<group hidden="true" id="recEscapeSequenceGroup" labelPosition="left">
<spacer height="5px"/>
<text id="recEscapeSequence" value="&quot;" label="Quote character" containerStyle="padding-left:5px;"  title="Character used to quote field contents - control characters must be represented in hex e.g. \x20 for space" size="5" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
</group>
</vgroup>
</group>
</vgroup>
<vgroup id="id2" hidden="true" enclosingStyle="padding:10px;" cellStyle="padding:3px;">
<spacer height="5px" />
<button id="fldCompBtn" controlClass="commandButton" title="#(%page.msgMakeCompositeTooltip)#" onclick="zenPage.onFieldTypeChange(zen('fldIsComposite').getValue());" caption="#(%page.msgMakeComposite)#" />
<checkbox id="fldIsComposite" hidden="true" label="Composite" onchange="zenPage.onFieldTypeChange(zenThis.value)" containerStyle="padding-left:15px;" />
<text id="fldName" label="Name" size="44" title="Name of field or composite" onchange="zenPage.onFieldNameChange(zenThis.value);" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<selector id="fldDatatype" label="Datatype" size="41" title="Datatype of the field. Select from the list below or enter your own" context="Ens/Datatypes" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<textarea id="fldAnnotation" label="Annotation" cols="40" rows="4" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);"/>
<hgroup>
<text id="fldWidth" label="Width" title="Width of the field" size="8" onchange="zenPage.applyDetails();" enclosingStyle="padding-right:15px;" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<checkbox id="fldRequired" label="Required" title="Mark the object property as Required" onchange="zenPage.applyDetails();" />
<spacer width="10px" />
<checkbox id="fldRepeating" label="Repeating" title="Mark the object property as Repeating" onchange="zenPage.applyDetails();" />
<spacer width="10px" />
<checkbox id="fldIgnore" label="Ignore" title="Do not store as an object property" onchange="zenPage.onIgnoreFieldChange();" />
</hgroup>
<text id="fldTrailingData" label="Trailing Data" size="44" title="Characters which must follow this field. Control characters must be represented in hex e.g. \x20 for space" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<text id="fldParams" label="Datatype Parameters" size="44" title="Parameters to apply to the datatype separated by semi-colon: e.g. XMLNAME=Field;MINLEN=1" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<hgroup>
<text id="fldSqlCol" label="SQL Column Number" title="Column number of the field when the table is accessed via SQL - must be between 2 and 4096 if specified" size="5" onchange="zenPage.applyDetails();" onkeyup="zenPage.textControlKeyUp(zenEvent,zenThis);" onkeydown="zenPage.textControlKeyDown(zenThis);" />
<spacer width="10px" />
<select id="fldIndex" label="Index" title="Control whether property should be indexed" valueList="1,bitmap,idkey,unique" displayList="standard,bitmap,idkey,unique" onchange="zenPage.applyDetails();" />
</hgroup>
</vgroup>
</form>

</vgroup>
</hgroup>
</pane>
}

ClientMethod setFieldType(newType, update) [ Language = javascript ]
{
	if (update && !this.canUserModify()) return false;
	var willBeComposite = (newType == 'composite');
		
	if (update) {
		var newItem;
		var name = zen('fldName').getValue();
		var annotation = zen('fldAnnotation').getValue();
		var fieldControls = ['fldWidth','fldIndex','fldDatatype','fldTrailingData','fldParams','fldSqlCol','fldRepeating'];
		if (willBeComposite) {
			groupTitle = $$$Text('Composite');
			for (var i = 0; i<fieldControls.length; i++) {
				var fieldName = fieldControls[i];
				zen(fieldName).setHidden(true);
				zen(fieldName).setValue('');
			}
			var required = zen('fldRequired').getValue();
			var ignored = zen('fldIgnore').getValue();
			newItem = new this.Composite(name, null, required, annotation, ignored);
		}
		else {
			if (this._nameIndex && this._nameIndex.field && this._nameIndex.field[name]) {
				alert($$$FormatText(zenPage.errNameCollision,'\''+name+'\''));
				return false;
			}
			
			groupTitle = $$$Text('Field');
			for (var i = 0; i<fieldControls.length; i++) {
				var fieldName = fieldControls[i];
				zen(fieldName).setHidden(false);
			}

			var required = zen('fldRequired').getValue();
			var repeating = zen('fldRepeating').getValue();
			var ignored = zen('fldIgnore').getValue();
			newItem = new this.Field(name, null, required, null, null, null, null, null, repeating, annotation, ignored);
		}
		zen('idPropertyTitle').setProperty('label',groupTitle);
		var item = this._rowIndex[this.currItem];
		
		if (item) {
			var parentName = item._parent.name;
			if (item._parent._class == 'EnsLib.RecordMap.Model.Record') {
				item._parent.Contents[item._index] = newItem;
				parentName = 0;
			}
			else {
				item._parent.SubElements[item._index] = newItem;
			}
			this.updateLastName(newItem.name,newType,parentName);
		}
		this._rowIndex[this.currItem] = newItem;
		this.currType = newType;
		item = null;

		this.updateTable();
	}
	
	var compButton = zen('fldCompBtn');
	if (compButton) {
		compButton.setProperty('caption', (willBeComposite ? $$$Text('Make Field') : $$$Text('Make Composite')));
		compButton.setProperty('title', (willBeComposite ? $$$Text('Click to make this composite a field') : $$$Text('Click to make this field a composite')));
	}
}

/// Modify available input fields based on whether an entry is a Field or Composite.
ClientMethod onFieldTypeChange() [ Language = javascript ]
{
	this.addUndoAction();
	this.setModified(true);
	var item = this._rowIndex[this.currItem];
	if (!item) {
		return;
	}
	var groupTitle = '';
	
	var willBeComposite = !item._iscomposite;
	
	var newType = (willBeComposite ? 'composite' : 'field');
	
	this.setFieldType(newType, true);
}

ClientMethod onBatchClassChange() [ Language = javascript ]
{
	var newBatchClass = zen('recBatchClass').getValue();
	var isSimpleBatch = (newBatchClass =='' ? true : false);
	if (newBatchClass != '') {
		isSimpleBatch = (1 == zenPage.IsSubclassOf(newBatchClass, 'EnsLib.RecordMap.SimpleBatch'));
	}
	
	zen('recSimpleBatchEdit').setHidden(!isSimpleBatch);
}

/// Remember last entered name
ClientMethod onFieldNameChange(newName) [ Language = javascript ]
{
	var isComposite = zen('fldIsComposite').getValue();
	var err = '';
	var item;
	if (!isComposite) {
		item = this._rowIndex[this.currItem];
		if (item) {
			newName = newName.toString();
			var fullFieldPath = (newName.charAt(0) == '$' ? newName.substring(1) : newName);
			if (this._nameIndex && this._nameIndex.field && this._nameIndex.field[fullFieldPath] && !(this._nameIndex.field[fullFieldPath] === item)) {
				err = $$$FormatText(this.errNameCollision,'\''+newName+'\'');
				zen('fldName').setValue(item.name);
			}
		}
	}
	if (err != '') {
		alert(err);
		// Focus on control after onchange event handling completes
		setTimeout("zen('fldName').focus();zen('fldName').select();",10);
		return false;
	}
	if (item && item._parent) {
		var parentName = item._parent.name;
		if (item._parent._class == 'EnsLib.RecordMap.Model.Record') {
			parentName = 0;
		}
		this.updateLastName(newName,(isComposite ? 'composite' : 'field'), parentName);
	}
	return zenPage.applyDetails();
}

/// Update the description (annotation) of this record map.
ClientMethod setDescription(desc) [ Language = javascript ]
{
	if (this.canEdit) {
		var model = this.getRecordObject();
		if (model) {
			if (desc != model.annotation) {
				model.annotation = desc;
				this.setModified(true);
			}
		}
	}
}

ClientMethod onRecTermChange(newValue, isRadio, noApply) [ Language = javascript ]
{
	var idlist = ['CR','LF','CRLF','Other','None'];
	for (key in idlist) {
		var val = idlist[key];
		var button = zen('recTerm_'+val);
		if (button) {
			if (val == 'Other') {
				if (isRadio) {
					button.setProperty('value', '');
				}
			}
			else {
				button.setProperty('value', newValue);
			}
		}
	}
	zen('recRecordTerminator').setValue(newValue);
	if (!noApply) {
		zenPage.applyDetails();
	}
}

ClientMethod onPaddingCharChange(newValue, isRadio, noApply) [ Language = javascript ]
{
	var idlist = ['Space','Tab','Other','None'];
	for (key in idlist) {
		var val = idlist[key];
		var button = zen('recPadding_'+val);
		if (button) {
			if (val == 'Other') {
				if (isRadio) {
					button.setProperty('value', '');
				}
			}
			else {
				button.setProperty('value', newValue);
			}
		}
	}
	zen('recPaddingChars').setValue(newValue);
	if (!noApply) {
		zenPage.applyDetails();
	}
	return;
}

ClientMethod onRecEscapingChange(escapeValue, noApply) [ Language = javascript ]
{
	var idlist = ['Quote','All','None'];
	for (key in idlist) {
		var val = idlist[key];
		var button = zen('recEscaping_'+val);
		if (button) {
			button.setProperty('value', escapeValue);
		}
	}
	zen('recEscapeSequenceGroup').setHidden((escapeValue==''));
	if (!noApply) {
		zenPage.applyDetails();
	}
}

ClientMethod onIgnoreFieldChange(noApply) [ Language = javascript ]
{
	if (this.readOnly || !this.canEdit) return;
	var ignored = zen('fldIgnore').getValue();
	var controls = ['fldDatatype','fldRequired','fldParams','fldSqlCol','fldIndex','fldRepeating'];
	for (var controlId in controls) {
		var ctrl = controls[controlId];
		zen(ctrl).setProperty('disabled',ignored);
	}

	if (!noApply) {
		zenPage.applyDetails();
	}
	return;
}

ClientMethod validateHexChars(chars) [ Language = javascript ]
{
	if (chars == '') { return true; }
	var re = new RegExp('/(0x[0-9]{2}){1,}/','i');
	return re.test(chars);
}

/// Check that the Target Classname is changed along with the RecordMap name
ClientMethod changeTargetClassname(newRecordName) [ Language = javascript ]
{
	if ((newRecordName != '') && (newRecordName != null)) {
		zen('recTargetClassname').setValue(newRecordName + '.Record');
	}
}

/// Hide/display the sample file section in the display
ClientMethod toggleSampleDiv(show) [ Language = javascript ]
{
	zenPage.showSample = show;
	zen('mapSample').setHidden(!show);
	var showDiv = document.getElementById('showSampleDiv');
	var hideDiv = document.getElementById('hideSampleDiv');
	
	hideDiv.style.display = (show ? 'block' : 'none');
	showDiv.style.display = (show ? 'none' : 'block');
	zenPage.adjustSizes();
	if (show) {
		zen('mapSample').refreshContents();
	}
}

/// Modify the available input fields based on the Record type
ClientMethod onRecordTypeChange(recordType, promptUser) [ Language = javascript ]
{
	if (promptUser) {
		var msg = $$$Text('Some settings will be discarded during the RecordMap change.');
		msg += '\n' + $$$FormatText($$$Text("Are you sure you want to change the Record Type to '%1'?"),recordType);
		var doChange = confirm(msg);
		if (!doChange) {
			var oldType = (recordType == 'delimited' ? 'fixedwidth' : 'delimited');
			zen('recType').setValue(oldType);
			return false;
		}
	}
	zen('recSeparators').setHidden(recordType != 'delimited');
	zen('recFieldSeparator').setHidden(recordType != 'fixedwidth');
	zen('fldWidth').setHidden(recordType != 'fixedwidth');
	zen('fldTrailingData').setHidden(recordType != 'fixedwidth');
	zen('fldRepeating').setHidden(recordType != 'delimited');
	
	if (recordType == 'fixedwidth') {
		if (zen('recPaddingChars').getValue() == '') {
			zen('recPaddingChars').setValue('\\x20');
		}
		// remove all separators
		var sepGroup = zen('recSeparators');
		for (var i = 0; i < sepGroup.children.length; i++) {
			var sepChild = sepGroup.children[i];
			if ((sepChild._type == 'hgroup') && (sepChild.id.toString() == '')) {
				zenPage.removeSeparator(sepChild.index);
			}
		}
		zen('fldRepeating').setValue('');
	}
	else if (recordType == 'delimited') {
		zen('recPaddingChars').setValue('');
		zen('recFieldSeparator').setValue('');
		zen('fldTrailingData').setValue('');
		zen('recAllowEarlyTerminator').setValue(false);
		
		// ensure widths are removed from objects
		if (this._rowIndex) {
			for (i = 0; i < this._rowIndex.length; i++) {
				var item = this._rowIndex[i];
				if (item.width) {
					item.width = '';
				}
			}
		}
	}
	return true;
}

/// Load the page for the specified RecordMap.
ClientMethod loadEditor(recordMapName, location, newMap, showSample, renamed) [ Language = javascript ]
{
	var url = "EnsPortal.RecordMapper.cls?MAP="+encodeURIComponent(recordMapName);
	url = url + (location ? "&LOC="+encodeURIComponent(location) : '');
	url = url + (newMap ? "&NEW=1" : '');
	url = url + ((showSample || (showSample ==null)) ? "&SHOWSAMPLE=1" : '');
	url = url + (renamed ? "&RENAMED=1" : '');
	this.gotoPage(url);
	return;
}

/// Helper method for loading the CSV Wizard with the current sample file.
ClientMethod loadCSVWizard(url) [ Language = javascript ]
{
	if (!this.checkEdit()) return false;
	this.checkTextControls();
	if (this.pageModified && !confirm($$$Text("Changes have not been saved. If you navigate to a new page these changes will be lost!"))) return false;
	
	if (this.sampleFile) {
		if (url.indexOf('?') == -1) {
			url = url + '?';
		}
		url = url + 'SAMPLEFILE='+this.sampleFile;
	}
	this.gotoPage(url);
}

/// Get the (localized) title string for the page.
Method %OnGetTitle() As %String
{
	If (..recordMap="") {
		Quit ..%OnGetPageName()
	}
	Quit ..recordMap
}

/// Get the (localized) name of the page.
Method %OnGetPageName() As %String
{
	Quit $$$Text("Record Mapper","Ensemble")
}

/// Get information to display in the ribbon bar.
Method OnGetRibbonInfo(Output pDisplay As %Boolean, Output pViewIcons As %List, Output pSortOptions As %List, Output pSearchBox As %Boolean, Output pRibbonTitle As %String, Output pCommands As %List) As %Status
{
	Set pDisplay = 1
	Set pSearchBox = 0
	Set pRibbonTitle = $$$Text("Record Mapper")

	// commands: $LB(id,caption,help,onclick)
	Set pCommands(1) = $LB("cmdOpen",$$$Text("Open"),..tipOpen,"zenPage.openRecordMap(); return false;")
	If $system.Security.Check("%Ens_RecordMap","WRITE") || $system.Security.Check("%Ens_Code","WRITE") {
		Set pCommands(2) = $LB("cmdNew",$$$Text("New"),..tipNew,"zenPage.newRecordMap(); return false;")
		Set pCommands(3) = $LB("cmdSave",$$$Text("Save"),..tipSave,"zenPage.saveRecordMap(false); return false;")
		Set pCommands(4) = $LB("cmdSaveAs",$$$Text("Save As"),..tipSaveAs,"zenPage.saveRecordMap(false,true); return false;")
		Set pCommands(5) = $LB("cmdSaveGen",$$$Text("Generate"),..tipGen,"zenPage.saveRecordMap(true); return false;")
		Set pCommands(6) = $LB("cmdDelete",$$$Text("Delete"),..tipDelete,"zenPage.deleteRecordMap(); return false;")
		Set pCommands(7) = $LB("cmdCSVWizard",$$$Text("CSV Wizard"),..tipCSVWizard,"zenPage.loadCSVWizard('EnsPortal.CSVRecordWizard.cls'); return false;")
	}
	Quit $$$OK
}

/// Draw the contents of the Header section.
Method DrawTableHeader(pSeed As %String) As %Status
{
	Set msgChange = $$$Text("Select sample file")
	Set hlpChange = $$$Text("Select a sample file")

	Set msgUndo = $$$Text("Undo")
	Set hlpUndo = $$$Text("Undo the last change to this map")
	
	Set msgHide = $$$Text("Hide sample")
	Set hlpHide = $$$Text("Hide the sample file display")
	
	Set msgShow = $$$Text("Show sample")
	Set hlpShow = $$$Text("Show the sample file display")
	
	Set msgRefresh = $$$Text("Refresh sample")
	Set hlpRefresh = $$$Text("Update the sample file display based on the last saved version of the RecordMap")
	
	&html<<div style="position:relative;">>
	&html<<div style="position:absolute; top:6px; left:20px; color:#404040;">
	&nbsp;<a class="hdrLink" href="#" title="#(hlpChange)#" onclick="zenPage.changeSampleFile();return false;">#(msgChange)#</a>
	</div>>
	&html<<div style="position:absolute; top:6px; left:270px; color:#404040;">
	&nbsp;
	&nbsp;&nbsp;&nbsp;<a id="cmdUndo" class="hdrLinkDisabled" disabled="true" href="#" title="#(hlpUndo)#" onclick="zenPage.undo();return false;">#(msgUndo)#</a>
	</div>>
	&html<<div id="hideSampleDiv" style="position:absolute; top:6px; left:420px; color:#404040;#($select(..showSample: " display: none;", 1: ""))#">
	&nbsp;
	&nbsp;&nbsp;&nbsp;<a id="cmdHideSample" class="hdrLink" href="#" title="#(hlpHide)#" onclick="zenPage.toggleSampleDiv(false);return false;">#(msgHide)#</a>
	&nbsp;
	&nbsp;&nbsp;&nbsp;<a id="cmdRefreshSample" class="hdrLink" href="#" title="#(hlpRefresh)#" onclick="zen('mapSample').refreshContents();return false;">#(msgRefresh)#</a>
	</div>>
	&html<<div id="showSampleDiv" style="position:absolute; top:6px; left:420px; color:#404040;#($select('..showSample: " display: none;", 1: ""))#">
	&nbsp;
	&nbsp;&nbsp;&nbsp;<a id="cmdShowSample" class="hdrLink" href="#" title="#(hlpShow)#" onclick="zenPage.toggleSampleDiv(true);return false;">#(msgShow)#</a>
	</div>>
	&html<<div style="position:absolute;top:16px;left:460px;font-weight:bold;color:#404040;">
	</div>>

	&html<</div>>
	Quit $$$OK
}

/// Draw the contents of the Data Sample panel.
Method DrawSampleData(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	If (..sampleFile = "") {
		Set msgSample=$$$TextHTML("No sample file selected")
		Set msgSampleHelp=$$$TextHTML("Click to select a sample file")
		&html<<div border=1><br/><center><a href="#" title="#(msgSampleHelp)#" onclick="zenPage.changeSampleFile();return false;">#(msgSample)#</a></center><br/></div>>
	} ElseIf '##class(%File).Exists(..sampleFile) {
		Set msgSample=$$$FormatText($$$TextHTML("Sample file %1 could not be opened"),..sampleFile)
		Set msgSampleHelp=$$$TextHTML("Click to select a different sample file")
		&html<<div><br/><center><a href="#" title="#(msgSampleHelp)#" onclick="zenPage.changeSampleFile();return false;">#(msgSample)#</a></center><br/></div>>
	} ElseIf (..recordMap = "")||('##class(EnsLib.RecordMap.Model.Record).Exists(..recordMap)) {
		Set data = ##class(%IO.FileStream).%New(..sampleFile).Read(1000)
		Set data = $ZCVT(data, "O", "HTML")
		Set data = $$replace^EnsUtil(data, $c(13,10),$c(13), $c(10),$c(13), $c(13),"<br/>", " ","&nbsp;")
		&html<<div>#(data)#</div>>
	} Else {
		Set tSC = ##class(EnsLib.RecordMap.Utils).SampleParse(..recordMap,..sampleFile, .tHTML)
		If $$$ISERR(tSC) Quit tSC
		Do tHTML.OutputToDevice()
	}
	Quit tSC
}

/// Adjust sizes of components on the page.
ClientMethod onlayoutHandler(load) [ Language = javascript ]
{
	try {
		this.toggleSampleDiv(this.showSample);
		this.updateTable();
		this.adjustSizes();
		
		if (load) {
			
			if (zenIsGecko || zenIsIE) {
				var txt = ['recTargetClassname','recFieldSeparator','fldName','fldTrailingData','fldParams'];
				for (var i in txt) {
					var comp = zen(txt[i]);
					if (comp) {
						comp.setProperty('size',53);
					}
				}
				var select = zen('fldDatatype');
				if (select) {
					select.setProperty('size',50);
				}
				var select = zen('recBatchClass');
				if (select) {
					select.setProperty('size',43);
				}
			} else { // Chrome
				var txtArea = ['recAnnotation','recLabel','fldAnnotation'];
				for (var i in txtArea) {
					var comp = zen(txtArea[i]);
					if (comp) {
						comp.setProperty('cols',46);
					}
				}
			}

			var scrollTop = 0;
			var scrollLeft = 0;
			if (this.lastLoc) {
				// get old scroll positions
				scrollTop = this.lastLoc.split(',')[1];
				scrollLeft = this.lastLoc.split(',')[2];
			}
			
			// reset scrolling !!!
			var tableWrapperDiv = self.document.getElementById('displayTable_wrapperDiv');
			if (tableWrapperDiv) {
				tableWrapperDiv.scrollTop = scrollTop;
				tableWrapperDiv.scrollLeft = scrollLeft;
			}
			
			if (this.getRecordObject()) {
				// initialise basic RecordMap information: ensure target class name is present
				this.selectItem('record',0);
				// but select old item afterward if needed
				if (this.lastLoc) {
					var lastItem = this.lastLoc.split(',')[0];
					if ((lastItem>-1)&&(this._rowIndex)) {
						var item = this._rowIndex[lastItem];
						if (item) {
							var type = ''
							switch(item._classname) {
								case 'EnsLib.RecordMap.Model.Record':
									type = 'record';
									break;
								default:
									type = (item._iscomposite ? 'composite' : 'field');
									break;
							}
							this.selectItem(type, lastItem);
						}
					}
				}
			}
			this.setReadOnly(this.readOnly || !this.canEdit);
		}
		if (this.isNew) this.setModified(true);
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in onlayoutHandler');
	}
}

/// Call <method>UpdateSCMenu</method>() first in case the document has been modified elsewhere,
/// then display the source control menu based on the contents of the _sourceControlMenu data
/// created by <method>UpdateSCMenu</method>().
ClientMethod showSCMenu() [ Language = javascript ]
{
	this.UpdateSCMenus();
	this.invokeSuper('showSCMenu',arguments);
}

/// Handle a source control menu selection.
ClientMethod chooseSCMenu(menuName, commandName, saveFlags) [ Language = javascript ]
{
	zenPage.wasReadOnly = zenPage.getIsReadOnly();
	this.invokeSuper('chooseSCMenu',arguments);
	zenPage.toggleReadOnly();
}

ClientMethod setReadOnly(readOnly) [ Language = javascript ]
{
	readOnly = !!readOnly;
	this.readOnly = readOnly;
	
	var form = zen('mainForm');
	if (form) {
		var controls = form.getControlList();
		if (controls) {
			for (var i = controls.length - 1; i >= 0; i--) {
				var ctrl = controls[i];
				if (ctrl) ctrl.setProperty('disabled',readOnly);
			}
		}
	}	
	
	var button = zen('fldCompBtn');
	if (button) {
		button.setProperty('controlClass',readOnly?'commandButtonDisabled':'commandButton');
		button.setDisabled(readOnly);
	}
	
	var sepBtn = zen('addSepButton');
	if (sepBtn) {
		if (readOnly) {
			sepBtn.content = sepBtn.getContent().replace("zenLabel linkAnchor","hdrLinkDisabled");
			sepBtn.content = sepBtn.getContent().replace("linkImage","reIconDisabled");
		} else {
			sepBtn.content = sepBtn.getContent().replace("hdrLinkDisabled","zenLabel linkAnchor");
			sepBtn.content = sepBtn.getContent().replace("reIconDisabled","linkImage");
		}
		zen('addSepButton').refreshContents();
	}
	
	// change undo button state
	var undo = document.getElementById('cmdUndo');
	if (undo) {
		undo.disabled = this.canUndo();
		undo.className = 'hdrLink' + ((this.canUndo()) ? '' : 'Disabled');
	}
	
	if (readOnly) {
		this.grayOutButtons();
		if (!this.canEdit) {
			this.grayOutOneButton('command_cmdNew');
			this.grayOutOneButton('command_cmdSaveAs');
		}
	} else {
		var btnSave = document.getElementById('command_cmdSave');
		if (btnSave) {
			btnSave.className = 'commandButton';
			btnSave.onclick = function() { zenPage.saveRecordMap(false,false); return false; }
			btnSave.title = this.tipSave;
		}
		var btnSaveGen = document.getElementById('command_cmdSaveGen');
		if (btnSaveGen) {
			btnSaveGen.className = 'commandButton';
			btnSaveGen.title = this.tipGen;
			btnSaveGen.onclick = function() { zenPage.saveRecordMap(true,false); return false; }
		}
		var btnDelete = document.getElementById('command_cmdDelete');
		if (btnDelete) {
			btnDelete.className = 'commandButton';
			btnDelete.title = this.tipDelete;
			btnDelete.onclick = function() { zenPage.deleteRecordMap(); return false; }
		}
	}
}

/// Adjust sizes of components on the page.
ClientMethod adjustSizes() [ Language = javascript ]
{
	try {
		if (this.inResizeLoop()) return;
		var propDiv = zen('propertyPane').getEnclosingDiv();
		var mainFormDiv = zen('mainForm').getEnclosingDiv();
		var titleDiv = zen('idPropertyTitle').getEnclosingDiv();
		if (titleDiv && titleDiv.parentElement) titleDiv = titleDiv.parentElement;
		var editDiv = zen('editorPane').getEnclosingDiv();
		var tableHdrDiv = zen('mapTableHeader').getEnclosingDiv();
		var sampleDiv = zen('mapSample').getEnclosingDiv();
		var tableBodyDiv = zen('modelTableBody').getEnclosingDiv();
		var displayHeader = document.getElementById('displayTable_RecordName');
		var displayDiv = document.getElementById('displayTable_wrapperDiv');

		propDiv.style.display = 'block';

		// find size of window
		var winHeight = zenGetWindowHeight();
		var winWidth = zenGetWindowWidth();

		var th = this.getTitleAreaHeight();
		var hgt = winHeight - th - 25;
		var propHeight = propDiv.offsetHeight;
		var propChild = propDiv.children[0];
		if (propChild) {
			propHeight = (propChild.offsetHeight > propHeight ? propChild.offsetHeight : propHeight);
		}
		
		hgt = ((hgt < propHeight) ? propHeight : hgt );
		var editorHgt = hgt - 1;
		var editorWid = winWidth - propDiv.offsetWidth - 25;
		var sampleHgt = sampleDiv.offsetHeight;

		editDiv.style.width = editorWid + 'px';
		// height is not calculated correctly on FF
		//editDiv.style.height = editorHgt + 'px';
		tableHdrDiv.style.width = editorWid + 'px';
		sampleDiv.style.width = (editorWid - 4)*(0.99) + 'px';
		tableBodyDiv.style.width = editorWid + 'px';
		if (displayDiv) {
			var displayHeaderHeight = (displayHeader ? displayHeader.offsetHeight : 0);
			displayDiv.style.height = editorHgt - tableHdrDiv.offsetHeight - sampleDiv.offsetHeight - displayHeaderHeight + 'px';
		}
		//tableBodyDiv.style.height = editorHgt - tableHdrDiv.offsetHeight - sampleDiv.offsetHeight + 'px';

		propDiv.style.height = hgt + 'px';
		mainFormDiv.style.height = (propDiv.offsetHeight - titleDiv.offsetHeight) + 'px';
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in adjustSizes');
	}
}

/// Check if user really wants to exit if they have not saved changes
ClientMethod onunloadHandler() [ Language = javascript ]
{
	if (this.pageModified) {
		var msg = $$$Text("Changes have not been saved. If you navigate to a new page these changes will be lost!");
		return msg;
	}
}

/// To avoid unloadHandler loop, override logout() and do the unload check ourselves.
ClientMethod logout() [ Language = javascript ]
{
	if (this.pageModified) {
		var msg = $$$Text("Changes have not been saved.\n\nDo you want to log out and lose these changes?");
		if (!confirm(msg)) return false;
	}
	this.pageModified = false; // make sure super doesn't ask again
	this.invokeSuper('logout',null);
	return false;
}

/// Update the contents of the model table.
ClientMethod updateTable() [ Language = javascript ]
{
	var table = zen('modelTableBody');
	var html = [];
	var record = this.getRecordObject();
	var currItem = null;
	if (this._rowIndex) {
		currItem = this._rowIndex[this.currItem];
	}
	var currentWrapper = document.getElementById('displayTable_wrapperDiv');
	var wrapperStyle = (currentWrapper && (currentWrapper.style.height != '')) ? 'height:'+currentWrapper.style.height : '';
	var scrollTop = (currentWrapper && currentWrapper.scrollTop) ? currentWrapper.scrollTop : 0;

	// maps row number in the table back to an item in the model
	this._rowIndex = [];
	if (!this._nameIndex) {
		this._nameIndex = { "field": {}, "composite": {}, "last": { "field": {}, "composite": {} } };
	}
	else {
		this._nameIndex.field = {};
		this._nameIndex.composite = {};
	}

	table.setContent('');
	// n.b., we add a _parent, _index and _path decoration to each element in the tree as we render
	// _index and _path are equivalent for elements in record.Contents
	if (null != record) {		
		// we also add an array to track if disclosures are open or closed
		if (null == record._contracted) {
			record._contracted = {};
		}

		var indentLevel = '<img height="1px" width="16px" src="images/spacer.gif"/>';
		var add = '';
		var remove = '';
		var up = '';
		var down = '';
		var recClosed = false;
		// the following three values are also defined in getSubElements()
		var spacerCell = '<td class="modelSpacerCell">&nbsp;</td>';
		var buttonClass = (!(this.readOnly || !this.canEdit)) ? 'imageLink mapImage' : '';
		var cellClass = 'modelButton';

		html.push('<table id="displayTable_RecordName" class="mapTable" border="0" cellspacing="0">');

		// RecordMap Record
		this._rowIndex.push(record);
		add = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/add_16.png' + '" title="' + this.tipAddField + '" onclick="zenPage.addItem(\'record\','+(this._rowIndex.length-1)+',null);" />';

		html.push('<tr class="modelRecordMap" id="row_'+(this._rowIndex.length-1)+'" onclick="zenPage.rowClick(\'record\','+(this._rowIndex.length-1)+');" onmouseover="this.style.color=\'black\';" onmouseout="this.style.color=\'\';">');
		html.push('<td width="10">' + '<span class="selector">&raquo;</span>' + '</td>');
		html.push('<td>' + zenEscapeHTML(record.name) + '</td>');
		html.push('<td class="'+cellClass+'">' + add + '&nbsp;</td>');
		html.push('<td class="'+cellClass+'">&nbsp;</td>'); // Up
		html.push('<td class="'+cellClass+'">&nbsp;</td>'); // Down
		html.push('<td class="'+cellClass+'">' + remove + '&nbsp;</td>'); // Delete
		html.push(spacerCell);
		html.push('</tr>');
		html.push('</table>');
		html.push('<div id="displayTable_wrapperDiv" style="'+wrapperStyle+'">');
		html.push('<table class="mapTable" border="0" cellspacing="0">');

		var fields = record.Contents;
		if (fields) {
			// Loop through Fields
			for (var i=0; i<fields.length; i++) {
				var fieldClosed = recClosed;
				var field = fields[i];
				field.RecordType = record.type;
				if (!fieldClosed) {
					field._parent = record;
					field._index = i;
					field._path = i;
					this._rowIndex.push(field);
				}

				up = (i == 0) ? '' : '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/up_16.png' + '" title="' + this.tipMoveItemUp + '" onclick="zenPage.moveItem('+(this._rowIndex.length-1)+',\''+ field._path+ '\',\'up\');" />';
				down = (i==(fields.length-1)) ? '' : '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/down_16.png' + '" title="' + this.tipMoveItemDown + '" onclick="zenPage.moveItem('+(this._rowIndex.length-1)+',\''+ field._path+'\', \'down\');" />';

				field._iscomposite = (field._class == 'EnsLib.RecordMap.Model.Composite');
				var fullFieldPath = (field.name.charAt(0) == '$' ? field.name.substring(1) : field.name);
				if (field._iscomposite) {
					this._nameIndex.composite[fullFieldPath] = field;
					if (!fieldClosed) {
						fieldClosed = record._contracted['composite'+i];
						add = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/add_16.png' + '" title="' + this.tipAddField + '" onclick="zenPage.addItem(\'composite\','+(this._rowIndex.length-1)+','+field._path+');" />';
						remove = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/close_a_16.png' + '" title="' + this.tipRemoveItem + '" onclick="zenPage.removeItem(\'composite\','+(this._rowIndex.length-1)+','+field._path+');" />';
						disc = '<img width="16px" src="' + (!fieldClosed ? 'images/arrow1D.gif' : 'images/arrow1R.gif') + '" onclick="zenPage.toggleDisclosure(\'composite'+field._path+'\');"/>';

						html.push('<tr class="modelRecordComposite" id="row_'+(this._rowIndex.length-1)+'" onclick="zenPage.rowClick(\'composite\','+(this._rowIndex.length-1)+');" onmouseover="this.style.color=\'black\';" onmouseout="this.style.color=\'\';">');
						html.push('<td width="10">' + '<span class="selector">&raquo;</span>' + '<span class="modelRowDetail">'+(i+1)+'</span>' + '</td>');
						html.push('<td>' + indentLevel + disc + '&nbsp;' + zenEscapeHTML(field.name) + '&nbsp;' + '</td>');
						if (!field.ignored) {
							html.push('<td></td>');
						} else {
							html.push('<td><span class="modelRowDetail">&nbsp;ignored&nbsp;</td>');
						}
						html.push('<td class="'+cellClass+'">' + add + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + up + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + down + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + remove + '&nbsp;</td>');
						html.push(spacerCell);
						html.push('</tr>');
					}

					var sub = field.SubElements;
					if (sub) {
						var tempHTML = this.getSubElements(1,sub,record,field,fieldClosed);
						if (!fieldClosed) html.push(tempHTML);
					}
				} else {
					this._nameIndex.field[fullFieldPath] = field;
					var nameParts = fullFieldPath.split('.');
					var prefix = '';
					for (var j = 0; j < nameParts.length; j++) {
						prefix = prefix + (j > 0 ? '.' : '') + nameParts.splice(0,1);
						this._nameIndex.field[prefix] = field;
					}
					if (!fieldClosed) {
						add = '';
						remove = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/close_a_16.png' + '" title="' + this.tipRemoveItem + '" onclick="zenPage.removeItem(\'field\','+(this._rowIndex.length-1)+','+zenEscapeHTML(field._path)+');" />';

						html.push('<tr class="modelRecordField" id="row_'+(this._rowIndex.length-1)+'" onclick="zenPage.rowClick(\'field\','+(this._rowIndex.length-1)+');" onmouseover="this.style.color=\'black\';" onmouseout="this.style.color=\'\';">');
						html.push('<td width="10">' + '<span class="selector">&raquo;</span>' + '<span class="modelRowDetail">'+(i+1)+'</span>' + '</td>');
						html.push('<td>' + indentLevel + zenEscapeHTML(field.name) + '</td>');
						html.push('<td>' + this.getRowDetail(field) + '</td>');
						html.push('<td class="'+cellClass+'">' + add + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + up + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + down + '&nbsp;</td>');
						html.push('<td class="'+cellClass+'">' + remove + '&nbsp;</td>');
						html.push(spacerCell);
						html.push('</tr>');
					}
				}
			}
		}
		html.push('</table>');
		html.push('</div>');
	}
	table.setContent(html.join(''));
	if (currItem) {
		var row = this.findRowForItem(currItem);
		var type;
		if (row == -1) {
			row = 0;
			type = 'record';
		}
		else {
			type = currItem._class.split('.');
			type = type[type.length - 1];
			type = type.toLowerCase();
		}
		this.selectItem(type, row, true);
	}
	if (scrollTop > 0) {
		currentWrapper = document.getElementById('displayTable_wrapperDiv');
		if (currentWrapper) currentWrapper.scrollTop = scrollTop;
	}
	return true;
}

/// Recursively get the next subelements.
ClientMethod getSubElements(depth, array, record, parent, closed) [ Internal, Language = javascript ]
{
	depth = ('undefined' == typeof depth) ? 0 : depth;
	var indent = 16 + (16*depth);
	var indentProperty = '<img height="1px" width="' + indent + 'px" src="images/spacer.gif"/>';
	// The following three properties are also defined in updateTable()
	var spacerCell = '<td class="modelSpacerCell">&nbsp;</td>';
	var buttonClass = 'imageLink mapImage';
	var cellClass = 'modelButton';
	var add = '';
	var remove = '';
	var up = '';
	var down = '';
	var field;
	var fieldClosed;
	var iscomposite;

	var html = new Array();
	if (!this._nameIndex) {
		this._nameIndex = { "field": {}, "composite": {}, "last": { "field": {}, "composite": {} } };
	}

	if (array) {
		for (var j = 0; j < array.length; j++) {
			var field = array[j];
			fieldClosed = closed;

			if (!fieldClosed) {
				// add pointers to levels to help navigate
				field._parent = parent;
				field._index = j;				
				field._path = parent._path + '_' + j;
				this._rowIndex.push(field);
			}

			up = (j == 0) ? '' : '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/up_16.png' + '" title="' + this.tipMoveItemUp + '" onclick="zenPage.moveItem('+(this._rowIndex.length-1)+',\''+ field._path+'\',\'up\');" />';
			down = (j == (array.length-1)) ? '' : '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/down_16.png' + '" title="' + this.tipMoveItemDown + '" onclick="zenPage.moveItem('+(this._rowIndex.length-1)+',\''+ field._path+'\',\'down\');" />';

			field.RecordType = record.type;
			field._iscomposite = (field._class == 'EnsLib.RecordMap.Model.Composite');
			var fullFieldPath = (field.name.charAt(0) == '$' ? field.name.substring(1) : field.name);
			if (field._iscomposite) {
				this._nameIndex.composite[fullFieldPath] = field;
				if (!fieldClosed) {
					fieldClosed = record._contracted['composite'+field._path];
					disc = '<img width="16px" src="' + (!fieldClosed ? 'images/arrow1D.gif' : 'images/arrow1R.gif') + '" onclick="zenPage.toggleDisclosure(\'composite'+field._path+'\');"/>';
					add = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/add_16.png' + '" title="' + this.tipAddField + '" onclick="zenPage.addItem(\'composite\','+(this._rowIndex.length-1)+',\''+field._path+'\');" />';
					remove = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/close_a_16.png' + '" title="' + this.tipRemoveItem + '" onclick="zenPage.removeItem(\'composite\','+(this._rowIndex.length-1)+',\''+field._path+'\');" />';

					html.push('<tr class="modelRecordComposite" id="row_'+(this._rowIndex.length-1)+'" onclick="zenPage.rowClick(\'composite\','+(this._rowIndex.length-1)+');" onmouseover="this.style.color=\'black\';" onmouseout="this.style.color=\'\';">');
					html.push('<td width="10">' + '<span class="selector">&raquo;</span>' + '</td>');
					html.push('<td>' + indentProperty + disc + '&nbsp;' + zenEscapeHTML(field.name) + '&nbsp;</td>');
					if (!field.ignored) {
						html.push('<td></td>');
					} else {
						html.push('<td><span class="modelRowDetail">&nbsp;ignored&nbsp;</td>');
					}
					html.push('<td class="'+cellClass+'">' + add + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + up + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + down + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + remove + '&nbsp;</td>');
					html.push(spacerCell);
					html.push('</tr>');
				}
				var tempHTML = this.getSubElements(depth+1,field.SubElements,record, field, fieldClosed);
				if (!fieldClosed) html.push(tempHTML);
			} else {
				this._nameIndex.field[fullFieldPath] = field;
				var nameParts = fullFieldPath.split('.');
				var prefix = '';
				for (var k = 0; k < nameParts.length; k++) {
					prefix = prefix + (k > 0 ? '.' : '') + nameParts.splice(0,1);
					this._nameIndex.field[prefix] = field;
				}
				if (!fieldClosed) {
					add = '';
					remove = '<img width="16px" class="'+buttonClass+'" src="' + 'deepsee/close_a_16.png' + '" title="' + this.tipRemoveItem + '" onclick="zenPage.removeItem(\'field\','+(this._rowIndex.length-1)+',\''+field._path+'\');" />';
					var rowDetails = '';

					html.push('<tr class="modelRecordField" id="row_'+(this._rowIndex.length-1)+'" onclick="zenPage.rowClick(\'field\','+(this._rowIndex.length-1)+');" onmouseover="this.style.color=\'black\';" onmouseout="this.style.color=\'\';">');
					html.push('<td width="10">' + '<span class="selector">&raquo;</span>' + '</td>');
					html.push('<td>'+indentProperty+zenEscapeHTML(field.name) + '</td>');
					html.push('<td>' + this.getRowDetail(field) + '</td>');
					html.push('<td class="'+cellClass+'">' + add + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + up + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + down + '&nbsp;</td>');
					html.push('<td class="'+cellClass+'">' + remove + '&nbsp;</td>');
					html.push(spacerCell);
					html.push('</tr>');
				}
			}
		}
	}
	return html.join('');
}

ClientMethod getRowDetail(field) [ Language = javascript ]
{
	var details = '';
	if (field) {
		details = '<span class="modelRowDetail">&nbsp;';
		if (!field.ignored) {
			var min = (field.required == true) ? '1' : '0';
			details += min + '..' + ((field.repeating == true) ? '&#8734;' : '1') + '&nbsp;';
			details += zenEscapeHTML(field.datatype);
			if (field.params != '') details += '(' + zenEscapeHTML(field.params.replace(/\;/g,', ')) + ')';
		} else {
			details += 'ignored'
		}
		if (field.RecordType == 'fixedwidth') details += ';&nbsp;'+ field.width;
		if (!field.ignored) {
			if (field.sqlColumn) details += ';&nbsp;&#35;' + zenEscapeHTML(field.sqlColumn);
			if (field.index != '') details += ';&nbsp;' + ((field.index == 1) ? 'standard' : field.index);
		}
		details += '&nbsp;</span>';
	}
	return details;
}

/// Add a new RecordMap.
ClientMethod newRecordMap() [ Language = javascript ]
{
	if (!this.checkEdit()) return false;
	this.checkTextControls();
	
	if (this.pageModified) {
		var ok = confirm($$$Text("Changes have not been saved for the current RecordMap. Are you sure you want to discard these changes and create a new RecordMap?"));
		if (ok == false) return;
	}
	// show wizard dialog
	var parms = {};
	zenLaunchPopupWindow(zenLink('EnsPortal.Dialog.RecordMapWizard.zen'),this.addPopupSuffix('RecordMapNew'),'status,scrollbars,resizable=yes,width=450,height=400',parms);
}

/// Get the next available "default" RecordMap name.
ClassMethod NextDefaultRecordMap() As %String [ Internal, ZenMethod ]
{
	Quit ##class(EnsLib.RecordMap.Utils).NextDefaultMap()
}

ClassMethod GetLastMap() As %String [ CodeMode = expression ]
{
$get(^EnsPortal.Settings($username,"RecordMapper","LastRecordMap"))
}

ClassMethod SetLastMap(pMapName As %String = "") [ ZenMethod ]
{
	If pMapName = "" {
		Kill ^EnsPortal.Settings($username,"RecordMapper","LastRecordMap")
	}
	Else {
		Set ^EnsPortal.Settings($username,"RecordMapper","LastRecordMap") = pMapName
	}
}

/// Add a new item to the table.
/// One needs to supply the type of the container object,
/// the row of the container, and the path to the clicked element,
/// which is specified by integers separated by _ (underscore) characters.
ClientMethod addItem(type, row, path) [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	var item = this._rowIndex[row];
	if (item) {
		var newItem = null;
		var newType = '';
		
		this.addUndoAction();
		this.setModified(true);
		var record = this.getRecordObject();
		var nextName = this.getNextName('field',(row == 0 ? 0 : item.name));
		newItem = new this.Field(nextName,record.type,false,'','','','','',false,'',false);
		
		if (path == null) {
			newItem._index = record.Contents.length;
			newItem._parent = record;
			record.Contents.splice(record.Contents.length,0,newItem);
		}
		else {
			var idx = path.toString().split('_');
			
			var array = record.Contents[idx[0]].SubElements;
			if (idx.length == 1) {
				newItem._index = record.Contents[idx[0]].SubElements.length;
				newItem._parent = record.Contents[idx[0]];
				record.Contents[idx[0]].SubElements.splice(record.Contents[idx[0]].SubElements.length, 0, newItem);
			}
			else {
				for (var n = 1; n < idx.length; n++) {
					if (null != idx[n+1]) {
						array = array[idx[n]].SubElements;
					} 
				}
				if (array[idx[idx.length-1]]) {
					newItem._index = idx[idx.length];
					newItem._parent = array[idx[idx.length-1]];
					array[idx[idx.length-1]].SubElements.splice(array[idx[idx.length-1]].SubElements.length,0,newItem);
				}
			}
		}
		// temporary sync allows Field Name to be selected, as expected	- otherwise update table finishes after select new item	
		var old = zenSynchronousMode;
		zenSynchronousMode = true;
		var sync = this.updateTable();
		this.selectNewItem(newItem, 'field', true);
		zenSynchronousMode = old;
	}
	return true;
}

/// A client-side constructor for a Record object.
/// It can be invoked using either: <br/>
/// var record = new zenPage.Record(args...) <br/>
/// or: <br/>
/// var record = new this.Record(args...) <br/>
/// where the latter would be invoked from a ClientMethod.
ClientMethod Record(name, charEncoding, targetClassname, rectype, required, label, padChars, padFromLeft, recTerm, fieldSep, seps, contents) [ Language = javascript ]
{
	this._class = 'EnsLib.RecordMap.Model.Record';
	this.name = (name ? name : 'User.NewRecordMap');
	this.charEncoding = (charEncoding ? charEncoding : 'UTF-8');
	this.targetClassname = (targetClassname ? targetClassname : this.name+'.Record');
	this.type = (rectype ? rectype : 'delimited');
	this.label = (label ? label : '');
	this.paddingChars = (padChars ? padChars : '');
	this.padFromLeft = (padFromLeft ? padFromLeft : '');
	this.recordTerminator = (recTerm ? recTerm : '\\x0d\\x0a');
	this.fieldSeparator = (fieldSep ? fieldSep : '');
	if (this.type == 'delimited') {
		if (seps != undefined) {
			this.Separators = seps.split('\n');
		}
		else {
			this.Separators = new Array();
			this.Separators[0] = '^';
		}
		
		this.fieldSeparator = '';
	}
	else if (this.type == 'fixedwidth') {
		this.paddingChars = (this.paddingChars != '' ? this.paddingChars : '\\x20');
	}
	this.Contents = (contents ? contents : new Array());
}

/// Client-side constructor for a Composite object.
ClientMethod Composite(name, rectype, required, annotation, ignored) [ Language = javascript ]
{
	this._class = 'EnsLib.RecordMap.Model.Composite';
	this._iscomposite = true;
	this.name = name;
	this.annotation = (annotation ? annotation : '');
	this.RecordType = (rectype ? rectype : 'delimited');
	
	this.required = (typeof required == 'undefined' ? false : required);
	this.ignored = (typeof ignored == 'undefined' ? false : ignored);
	this.SubElements = new Array();
}

/// Client-side constructor for a Field object.
ClientMethod Field(name, rectype, required, datatype, index, width, trailingData, params, repeating, annotation, ignored) [ Language = javascript ]
{
	this._class = 'EnsLib.RecordMap.Model.Field';
	this._iscomposite = false;
	this.name = name;
	this.RecordType = (rectype ? rectype : 'delimited');
	this.required = !!required;
	this.ignored = !!ignored;
	this.datatype = (datatype ? datatype : '%String');
	this.index = (index ? index : '');
	this.params = (params ? params : '');
	this.annotation = (annotation ? annotation : '');
	if (this.RecordType == 'fixedwidth') {
		this.width = (width ? width : 10);
		this.trailingData = (trailingData != null ? trailingData : '');
		this.repeating = '';
	}
	else { // delimited
		this.width = '';
		this.trailingData = '';
		this.repeating = (repeating ? true : '');
	}
}

/// Get the expected number of separators for a given record.
ClientMethod getRecordDepth(record) [ Language = javascript ]
{
	if (record) {
		var maxDepth = 0;
		for (var i = 0; i < record.Contents.length; i++) {
			var subElement = record.Contents[i];
			if (subElement) {
				var childDepth = 0;
				if (subElement._class == 'EnsLib.RecordMap.Model.Field') {
					childDepth = 1;
				}
				else {
					childDepth = this.getCompositeDepth(subElement);
				}
				if (childDepth > maxDepth) maxDepth = childDepth;
			}
		}
		return maxDepth;
	}
	return 0;
}

/// Get the distance to a given composite's "furthest" field, which represents the number
/// of separators it needs.
ClientMethod getCompositeDepth(composite) [ Language = javascript ]
{
	if (composite) {
		var maxDepth = 0;
		for (var i = 0; i < composite.SubElements.length; i++) {
			var subElement = composite.SubElements[i];
			if (subElement) {
				var childDepth = 0;
				if (subElement._class == 'EnsLib.RecordMap.Model.Field') {
					childDepth = 1;
				}
				else {
					childDepth = this.getCompositeDepth(subElement);
				}
				if (childDepth > maxDepth) maxDepth = childDepth;
			}
		}
		return maxDepth + 1;
	}
	return 0;
}

/// Find the row number in the table for the given model item.
/// This must be called after the table has been rendered.
ClientMethod findRowForItem(item) [ Language = javascript ]
{
	var row = -1;
	if (this._rowIndex) {
		for (var r = 0; r < this._rowIndex.length; r++) {
			if (this._rowIndex[r] === item) {
				row = r;
				break;
			}
		}
	}
	return row;
}

/// Helper method: select an item, make sure it is visible
/// and give focus to the details panel. The blockSuper variable is
/// used to control whether the next selectItem() event will be honored:
/// when adding an item from the + button, the new parent's onclick() will
/// be triggered, and we want to keep the new element in focus.
ClientMethod selectNewItem(newItem, newType, blockSuper) [ Language = javascript ]
{
	blockSuper = (blockSuper == undefined ? false : blockSuper);
	var row = this.findRowForItem(newItem);
	// select the new item
	this.selectItem(newType,row,true);
	// ensure this takes precedence over next selectItem() call from clicked row
	this.blockSuperEvent = blockSuper;
	// make sure the new item is visible
	var body = self.document.getElementById('modelTableBody');
	var body = self.document.getElementById('displayTable_wrapperDiv');
	var tr = self.document.getElementById('row_' + row);
	if (tr && body) {
		zenScrollIntoView(body,tr);
	}

	var giveFocusTo = '';
	switch(newType) {
	case 'record':
		giveFocusTo = 'recTargetClassname';
		break;
	case 'composite':
		giveFocusTo = 'fldName';
		break;
	case 'field':
		giveFocusTo = 'fldName';
		break;
	}
	
	if ('' != giveFocusTo) {
		var ctrl = zen(giveFocusTo);
		ctrl.focus();
		ctrl.select();
	}
}

/// Helper method to move items in the table.
/// row is the row in the rowIndex, path is the path to item in the diagram,
/// and direction is either the text string 'up' or 'down'.
/// Note that any direction value != 'up' is assumed to mean 'down'.
ClientMethod moveItem(row, path, direction) [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	var item = this._rowIndex[row];
	if (item) {	
		var recordMap = this.getRecordObject();
		if (recordMap) {
			this.addUndoAction();
			
			var idx = path.toString().split('_');
			
			if (idx.length == 1) {
				var inCurrPos = recordMap.Contents[idx[0]];
				var newPos = (direction=='up' ? (parseInt(idx[0]) - 1) : (parseInt(idx[0]) + 1));
				var inNewPos = recordMap.Contents[newPos];
				recordMap.Contents[idx[0]] = inNewPos;
				recordMap.Contents[newPos] = inCurrPos;
			}
			else {
				var array = recordMap.Contents[idx[0]].SubElements;
				for (var n = 1; n < idx.length-1; n++) {	
					if (null != idx[n+1]) {
						array = array[idx[n]].SubElements;
					}
				}
				var inCurrPos = array[idx[idx.length-1]];
				var newPos = (direction=='up' ? (parseInt(idx[idx.length-1]) - 1) : (parseInt(idx[idx.length-1]) + 1));
				var inNewPos = array[newPos];
				array[idx[idx.length-1]] = inNewPos;
				array[newPos] = inCurrPos;
			}
			this.updateTable();
			// ensure shifted, non-selected item has CSS corrected
			var movedItemPos = this.findRowForItem(inNewPos);
			var movedItemType = (inNewPos._class == 'EnsLib.RecordMap.Model.Field' ? 'field' : 'composite');
			var trow = self.document.getElementById('row_' + movedItemPos);
			if (trow) {
				trow.className = this.getCSSForType(movedItemType);
			}
			this.selectItem('record',-1,true);
			this.currItem = this.findRowForItem(inCurrPos);
			this.currItemType = (inCurrPos._class == 'EnsLib.RecordMap.Model.Field' ? 'field' : 'composite');
			this.selectItem(this.currItemType, this.currItem, true);
			this.blockSuperEvent = 1;
			this.setModified(true);
		}
	}
}

/// Remove a row from the table.
ClientMethod removeItem(type, row, path) [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	var item = this._rowIndex[row];
	if (item) {
		var record = this.getRecordObject();

		var ok = confirm($$$Text("Do you wish to delete this item?") + '\n' + type + ": " + item.name);
		if (!ok) {
			return;
		}
		this.addUndoAction();
		
		var idx = path.toString().split('_');
		
		if (idx.length == 1) {
			record.Contents.splice(idx[0], 1);
		}
		else {
			var array = record.Contents[idx[0]].SubElements;
			for (var n = 1; n < idx.length; n++) {	
				if (null != idx[n+1]) {
					array = array[idx[n]].SubElements;
				}
			}
			if (array[idx[idx.length-1]]) {
				array.splice(idx[idx.length-1],1);
			}
		}
		
		this.updateTable();

		// reset currItem
		this.currItem = -1;
		this.currItemType = '';
		this.selectItem(this.currItemType,this.currItem,true);
		this.blockSuperEvent = 1;
		this.setModified(true);
	}
	return true;
}

/// Return true if it is possible to undo an action
ClientMethod canUndo() [ Language = javascript ]
{
	return (this._undoBuffer && (this._undoBuffer.length > 0) && (this.canEdit && !this.readOnly));
}

/// Undo the most recent change.
ClientMethod undo() [ Language = javascript ]
{
	if (this.canUndo()) {
		var record = this.getRecordObject();
		var oldRecord = this._undoBuffer.pop();
		var json = this.getComponentById('record');
		json.setContentObject(oldRecord);
		this.updateTable();

		this.selectItem(this.currItemType,this.currItem,true);

		if (this._undoBuffer.length == 0) {
			// change undo button state
			var undo = self.document.getElementById('cmdUndo');
			undo.disabled = true;
			undo.className = 'hdrLinkDisabled';
			this.setModified(false);
		} else {
			this.setModified(true);
		}
	}
}

/// Clear the undo buffer.
ClientMethod clearUndoBuffer() [ Language = javascript ]
{
	this._undoBuffer = [];

	// change undo button state
	var undo = self.document.getElementById('cmdUndo');
	undo.disabled = true;
	undo.className = 'hdrLinkDisabled';
}

/// Remember the current state in the undo buffer.
ClientMethod addUndoAction() [ Language = javascript ]
{
	if (null == this._undoBuffer) {
		this._undoBuffer = [];
	}

	// remember copy of entire Record as state
	var record = this.getRecordObject();
	var oldRecord = this.cloneObject(record);
	this._undoBuffer.push(oldRecord);

	// change undo button state
	var undo = self.document.getElementById('cmdUndo');
	undo.disabled = false;
	undo.className = 'hdrLink';
}

/// Create a clone of the given object.
ClientMethod cloneObject(obj, clone) [ Language = javascript ]
{
	var clone = clone ? clone : new Object();
	for (var i in obj) {
		if ((i == '_parent')||(i == '_index')) {
			// skip back pointers
		}
		else if (null == obj[i]) {
			clone[i] = null;
		}
		else if (typeof obj[i] === 'object') {
			clone[i] = (obj[i].constructor === Array) ? new Array(): new Object();
			this.cloneObject(obj[i],clone[i]);
		}
		else {
			clone[i] = obj[i];
		}
	}
	return clone;
}

/// User click on disclosure icon in table.
ClientMethod toggleDisclosure(key) [ Language = javascript ]
{
	var record = this.getRecordObject();
	if (record && record._contracted) {
		record._contracted[key] = !record._contracted[key];
		this.updateTable();
	}
}

/// This class method callback is called just before the server-side page 
/// object is created.
Method %OnAfterCreatePage() As %Status
{
	Set tSC = ##super()
	If $$$ISERR(tSC) Quit tSC

	Set ..canEdit = ($system.Security.Check("%Ens_Code","WRITE") || $system.Security.Check("%Ens_RecordMap","WRITE"))
	If (..recordMap = "") && ('..isNew) {
		Set ..recordMap = ..GetLastMap()
		If (..recordMap '= "") && '##class(EnsLib.RecordMap.RecordMap).Exists(..recordMap) {
			Set ..recordMap = ""
			Do ..SetLastMap(..recordMap)
		}
	} Elseif (..recordMap '= "") {
		Do ..SetLastMap(..recordMap)
	}
	
	If ..recordMap '= "" {
		Set ..%GetComponentById("RecordMapName").value = ..recordMap
		Set ..%GetComponentById("propertyPane").hidden = 0
		Set tSampleName = ..LoadSampleFilename(..recordMap)
		If (tSampleName '= "") Set ..sampleFile = tSampleName
		Set ..%GetComponentById("mapSample").hidden = ('..showSample)
		
		If ..isNew {
			Set ..isNew = '##class(EnsLib.RecordMap.RecordMap).Exists(..recordMap)
		}
	}
	Quit tSC
}

/// Get Record definition for JSON provider.
Method GetRecordDefinition(ByRef pParms, Output pObject As %RegisteredObject) As %Status
{
	Set tSC = $$$OK
	Try {
	 	Set tName = $$$NormalizeClassname($get(pParms("RecordMapName")))
	 	Set tRecord = ""
	 	
		If (tName '= "") {
			If $IsObject(..%map) {
				Set tRecord = ..%map
			}
			ElseIf ..isNew {
				Set tRecord = ##class(EnsLib.RecordMap.Model.Record).%New()
				Set tRecord.name = tName
				Set tRecord.targetClassname = tName_".Record"
			}
			Else {
				Set tReadOnly = 0
				Set tSC = ..LoadClassDefinition(tName,.tMapDef,.tReadOnly)
				If $$$ISERR(tSC) Quit
				Set tConcurrency = $select(tReadOnly: 0, 1: 4)
				Set tRecord = ##class(EnsLib.RecordMap.Model.Record).LoadFromClass(tName,.tSC,,tConcurrency)
				If $$$ISERR(tSC) Quit
				If $IsObject(tRecord) {
					If ..IsSourceControlReadOnly(..GetInternalName()) {
						Set tRecord.ReadOnly = 2
					} Else {
						Set tRecord.ReadOnly = tReadOnly
					}
					Set tRecord.Timestamp = $zdatetime(tMapDef.TimeChanged,3,,6)
				}
			}
		}
		If $$$ISERR(tSC) Quit
		Set pObject = tRecord
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

/// Process submitted JSON content based on the object created
Method SubmitHandler(pCommand As %String, pProvider As %ZEN.Auxiliary.jsonProvider, ByRef pObject As %RegisteredObject, Output pResponse As %RegisteredObject) As %Status
{
    Set tSC = $$$OK
    Try {
	    Do ..generatedClasses.Clear()
	    If ($IsObject(pObject)) {
		    Set tReadOnly = 0
			If ((pCommand = "save") || (pCommand = "forcesave")) && pObject.%IsA("EnsLib.RecordMap.Model.Record") {
				If (pCommand = "save") && ##class(%Dictionary.ClassDefinition).%ExistsId(pObject.name) {
					Set tSC = ..LoadClassDefinition(pObject.name,.tMapDef,.tReadOnly,1)
					If $$$ISERR(tSC) Quit
					If $zdatetime(tMapDef.TimeChanged,3,,6) '= pObject.Timestamp {
						Set pProvider.error = "timestamp"
						Quit
					}
				}
				If ..IsSourceControlReadOnly(..GetInternalName()) {
					Set pProvider.error = $$$Text("Your source control framework has marked this document as read only, so you will not be able to modify this document.")
					Quit
				}
				Set tSC = pObject.SaveToClass()
				If $$$ISOK(tSC) {
					Set tMapName = $G(%session.Data("EnsRecordMap","SaveMap","MapName"))
					If (tMapName '= "") {
						// Kill class definition to avoid holding exclusive lock during multi-compile
						Kill tMapDef

						Set tObjectName = $G(%session.Data("EnsRecordMap","SaveMap","ObjectName"))
						Set tStructure = $G(%session.Data("EnsRecordMap","SaveMap","Structure"))
						Set tCompile = $G(%session.Data("EnsRecordMap","SaveMap","Compile"))
						Set tCompileFlags = $G(%session.Data("EnsRecordMap","SaveMap","CompileFlags"))
						Set tDisplay = 0
						Set tOverwriteBehaviour = $G(%session.Data("EnsRecordMap","SaveMap","Overwrite"))
						Set tKeepStorage = ''$G(%session.Data("EnsRecordMap","SaveMap","KeepStorage"),1)
						Set tSC = ##class(EnsLib.RecordMap.Generator).GenerateObject(tMapName,.tObjectName,tStructure,1,tCompile,tDisplay,tCompileFlags,tOverwriteBehaviour,.tGenList,tKeepStorage)
						// Get all generated classes
						Set tClass = ""
						For {
							Set tClass = $order(tGenList(tClass))
							Quit:(tClass = "")
							Do ..generatedClasses.Insert(tClass)
						}
					}
					Set pResponse = pObject
					// correct the ReadOnly flag on the response object
					Set pResponse.ReadOnly = tReadOnly
				}
				Kill %session.Data("EnsRecordMap","SaveMap")
			}
	    }  
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

ClientMethod getClientModel() [ Language = javascript ]
{
	return zen('record');
}

/// Return the current name of the class/object being modified
ClientMethod getCurrentName() [ Language = javascript ]
{
	return this.recordMap;
}

/// Return the RecordMap definition object.
ClientMethod getRecordObject() [ Language = javascript ]
{
	var json = this.getComponentById('record');
	var record = json.getContentObject();
	this.updateJSONSCReadOnly(record);
	return record;
}

/// Do the actual work of updating the view to match the current view mode.
ClientMethod setViewModeHandler(mode) [ Language = javascript ]
{
	this.adjustSizes();
}

/// Handle user click on a row in the table.
ClientMethod rowClick(type, row) [ Language = javascript ]
{
	this.selectItem(type,row);
}

ClientMethod addSeparator(sepValue, inRender) [ Language = javascript ]
{
	if ((!inRender) && !this.canUserModify()) return false;
	if (sepValue == '') {
		this.setModified(true);
	}
	var sepGroup = zen('recSeparators');
	var subgroup = this.createComponent('hgroup');
	var text = this.createComponent('text');
	text.setProperty('onchange', 'zenPage.applyDetails();');
	text.setProperty('size', 10);
	text.setProperty('disabled', !this.canEdit||this.readOnly);
	if (sepValue != null) {
		text.setProperty('value', sepValue);
	}
	var removeButton = this.createComponent('html');
	removeButton.content = '<img width="16px" src="' + 'deepsee/close_a_16.png' + '" title="' + this.tipRemoveItem + '" onclick="if (zenPage.canUserModify()) { zenPage.removeSeparator('+subgroup.index+');zenPage.applyDetails(); }" />';
	subgroup.addChild(text);
	subgroup.addChild(removeButton);
	sepGroup.addChild(subgroup, !inRender);
}

ClientMethod removeSeparator(index) [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	var subgroup = zenPage.getComponent(index);
	zenPage.deleteComponent(subgroup);
}

/// Select a row in the table.
ClientMethod selectItem(type, row, force) [ Language = javascript ]
{
	force = ('undefined' == typeof force) ? false : force;
	// prevent multiple events from overriding focus() called for new item
	if (this.blockSuperEvent) {
		this.blockSuperEvent = 0;
		return;
	}
	
	if ((this.currItem != row) || (force)) {
		// unhilite
		if (this.currItem >= 0 && this.currItemType != '') {
			var trow = self.document.getElementById('row_' + this.currItem);
			if (trow) {
				trow.className = this.getCSSForType(this.currItemType);
			}
		}

		this.currItem = row;
		this.currItemType = type;

		// hilite
		var trow = self.document.getElementById('row_' + this.currItem);
		if (trow) {
			trow.className = this.getCSSForType(this.currItemType) + 'Selected';
		}
		
		// make appropriate group in details panel visible
		zen('id1').setHidden(type != 'record');
		zen('id2').setHidden((type == 'field' || (type == 'composite')) ? false : true);
		var groupTitle = '';
		// set contents of detail form
		
		var item = this._rowIndex[row];
		if (item) {
			switch(type) {
			case 'record':
				var values = { 	'recTargetClassname': 'targetClassname', 
								'recBatchClass': 'batchClass',
								'recEncoding': 'charEncoding', 
								'recType': 'type',
								'recLabel': 'label',
								'recPaddingChars': 'paddingChars',
								'recPadFromLeft': 'padFromLeft',
								'recComplexBatchManaged': 'complexBatchManaged',
								'recAnnotation': 'annotation'
							};
				var isDelimited = (item.type == 'delimited');
				if (!isDelimited) {
					values['recFieldSeparator'] = 'fieldSeparator';
					values['recAllowEarlyTerminator'] = 'allowEarlyTerminator';
				}
				else {
					values['recRepeatSeparator'] = 'repeatSeparator';
				}
				for (var controlId in values) {
					zen(controlId).setValue(item[values[controlId]]);
				}
				var isRadioTerm = false;
				switch (item.recordTerminator) {
					case '\\x0a':
					case '':
					case '\\x0d':
					case '\\x0d\\x0a':
						isRadioTerm = true;
						break;
				}
				this.onRecTermChange(item.recordTerminator,isRadioTerm,true);
				if (!isRadioTerm) {
					zen('recTerm_Other').setValue(item.recordTerminator);
				}
				var isRadioPad = false;
				switch (item.paddingChars) {
					case ' ':
					case '\\x20':
					case '\\x09':
						isRadioPad = true;
				}
				this.onPaddingCharChange(item.paddingChars,isRadioPad,true);
				if (!isRadioPad) {
					zen('recPadding_Other').setValue(item.paddingChars);
				}
				
				var escaping = false;
				if (isDelimited) {
					var sepGroup = zen('recSeparators');
					sepGroup.children = new Array();
					sepGroup.addChild(zen('addSepButton'));
					for (var i = 0; i < item.Separators.length; i++) {
						this.addSeparator(item.Separators[i], true);
					}
					sepGroup.refreshContents();
					
					var escapeValue = '';
					if ((item.escaping == true) || (item.escaping=='quote')) {
						escapeValue = 'quote';
						escaping = true;
					} else if (item.escaping == 'all') {
						escapeValue = 'all';
						escaping = true;
					}
					this.onRecEscapingChange(escapeValue,true);
					
					if (escaping) {
						zen('recEscapeSequence').setValue(item.escapeSequence);
					}
				}
				var toShow = {	'recSeparators': isDelimited,
								'recRepeatSeparator': isDelimited,
								'recEscapingGroup': isDelimited,
								'recEscapeSequenceGroup': escaping,
								'recFieldSeparator': !isDelimited,
								'recAllowEarlyTerminator': !isDelimited
							};
				for (var controlId in toShow) {
					zen(controlId).setHidden(!toShow[controlId]);
				}
				
				groupTitle = $$$Text("Record");
				break;
			case 'field':
				zenPage.setFieldType('field');
				var values = {	'fldName': 'name',
								'fldIsComposite': '_iscomposite',
								'fldDatatype': 'datatype',
								'fldRequired': 'required',
								'fldParams': 'params',
								'fldSqlCol': 'sqlColumn',
								'fldIndex': 'index',
								'fldWidth': 'width',
								'fldTrailingData': 'trailingData',
								'fldAnnotation': 'annotation',
								'fldRepeating': 'repeating',
								'fldIgnore':'ignored'
							};
				for (var controlId in values) {
					var val = item[values[controlId]];
					val = ((val == undefined) ? '' : val);
					zen(controlId).setValue(val);
				}
				var isDelimited = (item.RecordType == 'delimited');
				var showIndex = (item.name.split('.').length == 1)
				var toShow = {	'fldDatatype': true,
								'fldParams': true,
								'fldSqlCol': true,
								'fldIndex': showIndex,
								'fldWidth': !isDelimited,
								'fldTrailingData': !isDelimited,
								'fldRepeating': isDelimited
							 };
				for (var controlId in toShow) {
					zen(controlId).setHidden(!toShow[controlId]);
				}
				if (!showIndex) {
					zen('fldIndex').setValue('');
				}
				if (isDelimited) {
					zen('fldWidth').setValue('');
					zen('fldTrailingData').setValue('');
				}
				zenPage.onIgnoreFieldChange(true);
				
				var showMAXLENHint = isDelimited && (item.datatype == '%String');
				var maxlenHint = (showMAXLENHint ? $$$Text('Note: the %String datatype has a default MAXLEN of 50. Override the default if you expect more data.') : '');
				if (zen('fldParams').getProperty('hint') != maxlenHint) {
					zen('fldParams').setProperty('hint',maxlenHint);
				}

				groupTitle = $$$Text("Field");
				break;
			case 'composite':
				zenPage.setFieldType('composite');
				
				var values = {	'fldName': 'name',
					'fldRequired': 'required',
					'fldAnnotation': 'annotation',
					'fldIgnore':'ignored'
				};
				for (var controlId in values) {
					var val = item[values[controlId]];
					val = ((val == undefined) ? '' : val);
					zen(controlId).setValue(val);
				}

				zen('fldIsComposite').setValue(true);
				zen('fldIndex').setHidden(true);
				zen('fldDatatype').setHidden(true);
				zen('fldWidth').setHidden(true);
				zen('fldRepeating').setHidden(true);
				zen('fldTrailingData').setHidden(true);
				zen('fldParams').setHidden(true);
				zenPage.onIgnoreFieldChange(true);

				groupTitle = $$$Text("Composite");
				break;
			case '': // removing item, so hide details on right
				zen('id1').setHidden(true);
				zen('id2').setHidden(true);
				break;
			}
		}
		zen('idPropertyTitle').setProperty('label',groupTitle);
		//zenPage.adjustSizes();
	}
}

/// Find the css class for the given row type.
ClientMethod getCSSForType(type) [ Language = javascript ]
{
	switch(type) {
	case 'record':
		return 'modelRecordMap';
	case 'field':
		return 'modelRecordField';
	case 'composite':
		return 'modelRecordComposite';
	default:
		alert('Unknown type ' + type);
		break;
	}
	return '';
}

/// Apply changes from detail form.
ClientMethod applyDetails() [ Language = javascript ]
{
	if (!this.canUserModify()) { return false; }
	this._textMonitor.reset();
	this.setModified(true);
	var err = '';
	var focus = null;
	var item = this._rowIndex[this.currItem];
	if (item) {
		this.addUndoAction();
		
		switch(this.currItemType) {
			case 'record':
				var values = {	'type': 'recType',
								'charEncoding': 'recEncoding',
								'targetClassname': 'recTargetClassname',
								'batchClass': 'recBatchClass',
								'padFromLeft': 'recPadFromLeft',
								'label': 'recLabel',
								'paddingChars': 'recPaddingChars',
								'recordTerminator': 'recRecordTerminator',
								'allowEarlyTerminator': 'recAllowEarlyTerminator',
								'complexBatchManaged': 'recComplexBatchManaged',
								'fieldSeparator': 'recFieldSeparator',
								'escaping': 'recEscaping_None',
								'escapeSequence': 'recEscapeSequence',
								'annotation': 'recAnnotation',
								'repeatSeparator': 'recRepeatSeparator'
							 };
				for (var name in values) {
					item[name] = zen(values[name]).getValue();
				}
				if ((item.type != 'delimited') || (item.escaping == '')) {
					item.escaping = '';
					item.escapeSequence = '';
				}
				var sepGroup = zen('recSeparators');
				item.Separators = new Array();
				for (var i = 0; i < sepGroup.children.length; i++) {
					var group = sepGroup.children[i];
					if (group.getProperty('id') != 'addSepButton') {
						var text = group.children[0];
						item.Separators[item.Separators.length] = text.getValue();
					}
				}
				break;
			case 'field':
				var values = { 	'name': 'fldName',
								'datatype': 'fldDatatype',
								'required': 'fldRequired',
								'width': 'fldWidth',
								'trailingData': 'fldTrailingData',
								'params': 'fldParams',
								'repeating': 'fldRepeating',
								'sqlColumn': 'fldSqlCol',
								'annotation': 'fldAnnotation',
								'ignored': 'fldIgnore'}
				for (var name in values) {
					item[name] = zen(values[name]).getValue();
				}
				if (item.name.split('.').length == 1) {
					item.index = zen('fldIndex').getValue();
				}
				break;
			case 'composite':
				var values = { 	'name': 'fldName',
					'required': 'fldRequired',
					'annotation': 'fldAnnotation',
					'ignored': 'fldIgnore'}
				for (var name in values) {
					item[name] = zen(values[name]).getValue();
				}

				break;
			default:
				alert('Unknown type ' + type);
			break;
		}
		if (err != '') {
			alert(err);
			if (focus) {
				focus.focus();
			}
			return;
		}

		this.updateTable();
	}
}

/// Helper method to record the last name used on the client.
ClientMethod updateLastName(name, type, parentName) [ Language = javascript ]
{
	if (this._nameIndex && this._nameIndex.last && this._nameIndex.last[type]) {
		var index = this._nameIndex.last[type];
		index[parentName] = name;
	}
}

/// Helper method to get the last name used for a specific parent object.
ClientMethod getLastName(type, parentName) [ Language = javascript ]
{
	type = !type ? 'field' : type;
	var lastName = 'NewField1';
	if (this._nameIndex && this._nameIndex.last && this._nameIndex.last[type]) {
		var index = this._nameIndex.last[type];
		if (index[parentName]) {
			lastName = index[parentName];
		}
	}
	return lastName;
}

/// Helper method to calculate the next name to use for a given parent.
ClientMethod getNextName(type, parentName) [ Language = javascript ]
{
	type = !type ? 'field' : type;
	var newName = this.getLastName(type,parentName);
	if (this._nameIndex && this._nameIndex.field) {
		if (parentName != 0) {
			var parts = newName.split('.');
			var last = parts.pop();
			var prefix = parts.join('.')
			if ((prefix != parentName) && ((prefix != '') || (newName == 'NewField1'))) { // '' should be overridden only when adding the first field
				newName = parentName + '.' + last;
			}
		}
		
		var index = this._nameIndex[type];
		var done = false;
		while (!done) {
			if (!index[newName]) {
				done = true;
			}
			else {
				// reverse the string, find first non-digit character, then reverse the parts
				var backString = this.reverseString(newName);
				var numberEnd = backString.search(/\D/);
				var namePart = this.reverseString(backString.substring(numberEnd));
				var numPart = parseInt(this.reverseString(backString.substring(0,numberEnd)),10);
				if (isNaN(numPart)) numPart = 0;
				numPart++;
				newName = namePart + numPart;
			}
		}
	}
	this.updateLastName(newName,type,parentName);
	return newName;
}

ClientMethod reverseString(str) [ Language = javascript ]
{
	return ('' + str).split('').reverse().join('');
}

/// Basic validation to check that:
/// <ul><li>Record and Composite elements have children</li>
/// <li>Enough separators have been defined for delimited records</li></ul>
ClientMethod validateRecord() [ Language = javascript ]
{
	var invalidRows = [];
	var badSqlCols = [];
	var maxDepth = 0;
	var hasRepeats = false;
	var needRepSep = false;
	var needSeps = false;
	if (this._rowIndex) {
		for (var i = 0; i < this._rowIndex.length; i++) {
			var item = this._rowIndex[i];
			if (item) {
				if (((i == 0) && (item.Contents.length == 0)) || ((item._iscomposite) && (item.SubElements.length == 0)))  {
					var trow = self.document.getElementById('row_' + i);
					if (trow) trow.className = (trow.className != null ? trow.className + ' saveError' : 'saveError');
					invalidRows.push(item.name);
				}
				if (item.sqlColumn) {
					if ((item.sqlColumn < 2) || (item.sqlColumn > 4096)) {
						var trow = self.document.getElementById('row_' + i);
						if (trow) trow.className = (trow.className != null ? trow.className + ' saveError' : 'saveError');
						badSqlCols.push(item.name);
					}
				}
				if ((!item._iscomposite) && item.repeating) {
					hasRepeats = true;
				}
			}
		}
		var record = this._rowIndex[0];
		if ((record) && (record.type == 'delimited')) {
			maxDepth = this.getRecordDepth(record);
			needSeps = (maxDepth > record.Separators.length);
			needRepSep = (hasRepeats) && (record.repeatSeparator === '');
		}
	}
	
	if ((invalidRows.length > 0) || (needSeps) || (badSqlCols.length > 0) || needRepSep) {
		var errorText = '';
		if (needSeps) {
			var sepLen = record.Separators.length.toString();
			errorText += '\n' + $$$FormatText($$$Text("Not enough separators. %1 separator(s) needed, but only %2 separator(s) defined."),maxDepth,sepLen);
		}
		if (invalidRows.length > 0) {
			errorText += '\n' + $$$Text("Records and Composites must contain child elements.");
			errorText += '\n' + $$$FormatText($$$Text("The following items do not: %1"),invalidRows.join(', '));
		}
		if (badSqlCols.length > 0) {
			errorText += '\n' + $$$Text("Fields must have an empty SQL Column Number, or a value between 2 and 4096");
			errorText += '\n' + $$$FormatText($$$Text("The following items do not: %1"),badSqlCols.join(', '));
		}
		if (needRepSep) {
			errorText += '\n' + $$$Text("Repeating fields exist, but no repeat separator is defined.");
		}
		errorText = $$$FormatText($$$Text("Error saving RecordMap: \n %1 \n\n Please correct errors before saving."),errorText);
		alert(errorText);
		return false;
	}
	return true;
}

/// Save the current model. This includes initial validation on the RecordMap.
ClientMethod saveRecordMap(doGenerate, showDialog) [ Language = javascript ]
{
	if (!this.canUserModify(showDialog)) return false;
	this.checkTextControls();
	if (this.recordMap == "") {
		alert($$$Text("Nothing to save."));
		return;
	}
	// basic validation on client
	var ok = this.validateRecord();
	if (!ok) {
		// Enable correction of document after failed Save As while readonly
		if (showDialog && this.readOnly) {
			this.setReadOnly(false);
			zenPage.grayOutOneButton('command_cmdSave');
			zenPage.grayOutOneButton('command_cmdSaveGen');
			zenPage.grayOutOneButton('command_cmdDelete');
		}
		return;
	}
	
	if (doGenerate) {
		this.lastLoc = this.getCurrentLocation();
		var ok = this.doSave(true,true);
		if (ok) {
			var objectName = zen('recTargetClassname').getValue();
			// show save dialog
			var parms = {
					MODE:'savemap',
					RECORDMAP:this.recordMap,
					OBJECTNAME:objectName
					};

			zenLaunchPopupWindow(zenLink('EnsPortal.Dialog.RecordMapSave.zen'),this.addPopupSuffix('MapSave'),'status,scrollbars,resizable=yes,width=700,height=700',parms);
		}
	} else if (showDialog) {
		//show save dialog
		var desc = '';
		var record = this.getRecordObject();
		if (record) {
			desc = record.annotation;
		}
		var parms = {
			RECORD:this.recordMap,
			DESC:desc
		};
		zenLaunchPopupWindow(zenLink('EnsPortal.Dialog.RecordMapSaveAs.zen'),this.addPopupSuffix('MapSaveAs'),'status,scrollbars,resizable=yes,width=500,height=500',parms);
	} else {
		this.doSave();
	}
}

/// Method to save the RecordMap to disk without generating any classes.
ClientMethod doSave(force, noload, alertWindow) [ Language = javascript ]
{
	var rename = false;
	var model = this.getRecordObject();
	if ((zenPage.recordAsName != '') && (zenPage.recordAsName != zenPage.recordMap)) {
		rename = true;
		var recordOldName = this.recordMap;
		this.recordMap = this.recordAsName;
		this.recordAsName = '';
		var oldClassname = model.targetClassname;
		var oldBatch = model.batchClass;
		model.name = this.recordMap;
		model.targetClassname = this.recordMap + '.Record';
		model.batchClass = '';
	}
	if (!this.canUserModify(rename)) return false;
	if ((!force) && (!this.pageModified) && (!rename)) {
		alert($$$Text('No changes to save.'));
		return true;
	}
	this.generatedClasses = [];
	if (rename && this.readOnly) {
		try {
			this.readOnly = false;
			var ok = this.saveDocument();
			this.readOnly = true;
		} catch (ex) {
			this.readOnly = true;
		}
	} else {
		var ok = this.saveDocument();
	}
	var msg = '';
	if (ok) {
		msg = $$$Text('RecordMap saved.');
	}
	else {
		if (rename) {
			// reset old name
			this.recordMap = recordOldName;
			model.name = recordOldName;
			model.targetClassname = oldClassname;
			model.batchClass = oldBatch;
			// Enable correction of document after failed Save As while readonly, but only if failure is a validation error and not source control/timestamp
			if (this.readOnly && this.pageModified) {
				var json = this.getClientModel();
				if (json.error.substring(0,5)=="ERROR") {
					this.setReadOnly(false);
					zenPage.grayOutOneButton('command_cmdSave');
					zenPage.grayOutOneButton('command_cmdSaveGen');
					zenPage.grayOutOneButton('command_cmdDelete');
					alert($$$Text('Please correct errors before saving.'));
				}
			}
		} else	if (zenPage.getIsReadOnly()) {
			// If this document was found to be readOnly, gray out buttons to indicate this
			zenPage.grayOutButtons();
		}
		// reset description to old value; control still holds original value if save failed
		model.annotation = zen('recAnnotation').getValue();
		if (this.generatedClasses && (this.generatedClasses.length > 0)) {
			this.loadDocument();
		}
		return false;
	}
	if (this.generatedClasses && (this.generatedClasses.length > 0)) {
		if (msg != '') {
			msg += '\n';
		}
		msg += $$$Text('The following classes were generated:');
		for (var i = 0; i < this.generatedClasses.length; i++) {
			msg += '\n\t' + this.generatedClasses[i];
		}
	}
	if (msg != '') {
		var win = (alertWindow ? alertWindow : window);
		win.alert(msg);
	}
	if (ok && !noload) {
		var currLoc = this.getCurrentLocation();
		this.clearUndoBuffer();
		this.setModified(false);
		this.loadEditor(this.recordMap, currLoc,null,this.showSample,rename);
	}
	else {
		return !!ok;
	}
}

/// Ensure we redraw the table if the model was updated.
ClientMethod onDocumentSaveComplete(contentUpdated) [ Language = javascript ]
{
	this.invokeSuper('onDocumentSaveComplete',arguments);
	if (contentUpdated) this.updateTable();
}

/// Ensure we redraw the diagram if a reload was requested
ClientMethod onDocumentReload(reason) [ Language = javascript ]
{
	if (this._inReload) return; // avoid recursion
	this._inReload = true;
	this.updateDocumentState(true);
	if (reason == "dataChange") {
		this.updateTable();
		this.setModified(false);
	}
	this._inReload = false;
}

ClientMethod deleteRecordMap() [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	if (this.recordMap == '') {
		return '';
	}
	if (zenPage.IsDocReadOnly()) {
		alert($$$Text($$$Text("Your source control framework has marked this document as read only, so you will not be able to delete this document.")));
		// Gray out buttons to indicate this document is readOnly
		zenPage.grayOutButtons();
		return false;
	}
	var objectName = zen('recTargetClassname').getValue();
	var parms = {
		RECORDMAP:this.recordMap,
		OBJECTNAME:objectName
		};
	zenLaunchPopupWindow(zenLink('EnsPortal.Dialog.RecordMapDelete.zen'),this.addPopupSuffix('DeleteRecordMap'),'status,scrollbars,resizable=yes,width=500,height=400',parms);
}

/// Launch the file dialog to select a sample file.
ClientMethod changeSampleFile() [ Language = javascript ]
{
	if (!this.canViewFileSystem) {
		alert(this.msgNotPermitted);
		return false;
	}
	var wild = "*.txt";
	var str = this.sampleFile;
	var len = str.length;
	if (len > 0) {
		var dir = this.sampleFile;
		if (str.charAt(len-4) == ".") {
			var wild = "*" + str.substring(len-4);
		}
	} else {
		var dir = zenPage.GetDefaultDir();
	}
	var parms = {
		Dir:dir,
		wildcard:wild
		};	
	zenLaunchPopupWindow(zenLink('%ZEN.Dialog.fileSelect.zen'),this.addPopupSuffix('MapSampleFile'),'status,scrollbars,resizable=yes,width=600,height=600',parms);
}

ClientMethod editSimpleBatch() [ Language = javascript ]
{
	if (!this.canUserModify()) return false;
	var batchName = zen('recBatchClass').getValue();
	var parms = {
		RECORDMAP:this.recordMap,
		BATCHCLASS:batchName
	};
	zenLaunchPopupWindow(zenLink('EnsPortal.Dialog.RecordMapSimpleBatch.zen'),this.addPopupSuffix('EditSimpleBatch'),'status,scrollbars,resizable=yes,width=600,height=600',parms);
}

/// Launch the finder dialog to select a RecordMap.
ClientMethod openRecordMap() [ Language = javascript ]
{
	this.checkTextControls();
	// check if user has made changes and prompt them to save
	
	if (this.pageModified) {
		var ok = confirm($$$Text("Changes have not been saved for the current RecordMap. Discard the changes?"));
		if (ok == false) {
			return false;	
		}
	}
	
	var parms = {
		MODE: 'classes',
		SUPER: 'EnsLib.RecordMap.RecordMap'
	};
	zenLaunchPopupWindow(zenLink('%ZEN.Dialog.finderDialog.zen'),this.addPopupSuffix('RecordMapOpen'),'status,scrollbars,resizable=yes,width=800,height=600',parms);
}

/// This client event is fired when the a popup page launched from this page fires an action.
ClientMethod onPopupAction(popupName, action, value) [ Language = javascript ]
{
	if (action != "ok") {
		return false;
	}
	popupName = this.removePopupSuffix(popupName);
	switch(popupName) {
	case 'MapSampleFile':
		// set new file name, update sample
		this.sampleFile = value;
		this.SaveSampleFilename(this.recordMap,value);
		zen('mapSample').refreshContents();
		break;
	case 'RecordMapOpen':
		// take cls off the end
		var list = value.toString().split('.');
		list.length = list.length - 1;
		value = list.join('.');
		this.recordMap = value;
		this.loadEditor(value,null,null,this.showSample);
		break;
	case 'RecordMapNew':
		if (value != '') {
			this.loadEditor(value,'',true);
		}
		break;
	case 'MapSave':
		this.doSave(true,null,self.zenPopupWindow);
		break;
	case 'MapSaveAs':
		this.doSave(false,false,self.zenPopupWindow);
		break;
	case 'DeleteRecordMap':
		this.recordMap = '';
		this.loadEditor('');
		break;
	case 'EditSimpleBatch':
		zen('recBatchClass').setValue(value);
		zenPage.applyDetails();
		break;
	case 'switchNamespace':
		zenPage.changeURLNamespace(value);
		break;
	}
}

/// Item selected within the Finder.
ClientMethod itemSelected(item) [ Language = javascript ]
{
	return true;
}

/// Returns the index of the currently selected item and the offsets of the main window in
/// a comma separated list. It returns the empty string "" if no item is selected.
ClientMethod getCurrentLocation() [ Language = javascript ]
{
	if (!this.currItem) {
		return '';
	}
	var tableWrapperDiv = document.getElementById('displayTable_wrapperDiv');
	var scrollTop = tableWrapperDiv ? tableWrapperDiv.scrollTop : 0;
	var scrollLeft = tableWrapperDiv ? tableWrapperDiv.scrollLeft : 0;
	return this.currItem + ',' + scrollTop + ',' + scrollLeft;
}

/// Save the sample file name for the current user so that it is initialised for later sessions.
ClassMethod SaveSampleFilename(recordMap = "", filename) [ ZenMethod ]
{
	Do ..SetDefaultDir(filename)
	Set ^EnsPortal("RecordMapper", "LastFileName", $username) = filename
	If recordMap '= "" {
		Set recordMap = $$$NormalizeClassname(recordMap)
		Set ^EnsPortal("RecordMapper", "LastFileName", $username, recordMap) = filename
	}
	Quit
}

/// Load the last used sample file for the current user.
ClassMethod LoadSampleFilename(recordMap = "") As %String [ ZenMethod ]
{
	Set recordMap = $$$NormalizeClassname(recordMap)
	If recordMap = "" { Quit $get(^EnsPortal("RecordMapper", "LastFileName", $username)) }
	Else { Quit $get(^EnsPortal("RecordMapper", "LastFileName", $username, recordMap)) }
}

Method GetDefaultDir() As %String [ ZenMethod ]
{
	Quit $G(^EnsPortal.Settings($USERNAME, "RMSampleFileDir"))
}

ClassMethod SetDefaultDir(pPathname As %String) [ ZenMethod ]
{
	Set ^EnsPortal.Settings($USERNAME, "RMSampleFileDir") = ##class(%File).GetDirectory(pPathname, 1)
}

Method GetInternalName() As %String
{
	Quit $select(..recordMap = "": "", 1: $$$NormalizeClassname(..recordMap_".CLS"))
}

ClassMethod IsSubclassOf(classname As %String, superclass As %String) As %Integer [ ZenMethod ]
{
	Quit $classmethod("EnsPortal.Utils","IsSubclass",classname,superclass)
}

}
