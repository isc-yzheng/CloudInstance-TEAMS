/* Copyright (c) 2020 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

Include EnsEDIX12

Class EnsPortal.EDI.X12.SchemaMain Extends EnsPortal.EDI.Template [ System = 4 ]
{

/// Displayed name of this page.
Parameter PAGENAME = "X12 Schemas";

Parameter CSSINCLUDES = "ensemble/Ensemble_Wizards.css,ensemble/Ensemble_EDI.css";

Property Status As %String;

/// Is the user permitted to access the fileSelect popup.
Property canViewFileSystem As %Boolean [ InitialExpression = {$system.Security.Check("%Ens_ViewFileSystem","USE")} ];

/// Id of selected Category row in results table.
Property Category As %ZEN.Datatype.string(ZENURL = "CAT");

/// flag for background file import underway on load
Property underway As %String;

Property tipRefresh As %String [ InitialExpression = {$$$TextHTML("Refresh status")} ];

XData Style
{
<style type="text/css">

#searchPanel {
	/*width: 300px;*/
	padding-left: 5px;
	padding-right: 5px;
	background: #edece4;
	overflow: hidden;
	overflow-y: auto;
}

table.tpTable tr.tpEven {
	background: white;
}

table.tpTable tr.tpOdd {
	background: #F1F0E7;
}

table.tpTable tr.tpSelected {
	background: rgb(47,98,128);
	color: white;
}

table.tpTable tr.tpSelected td {
	font-weight: bold;
}

table.tpTable td {
	padding-right:10px;
}

table.tpTable {
	width: auto;
}

.searchPanelText {
	color: #404040;
	font-size: 10pt;
	text-align: center;
	padding: 3px;
	padding-top: 20px;
	padding-bottom: 20px;
}

.titlePane {
	color: #606060;
	font-family: Arial, Helvetica, sans-serif;
	font-weight: bold;
	background: none;
	width: 100%;
	padding: 0px;
	border-bottom: 1px solid silver;
	font-size: 12pt;
	text-align: center;
}

.zenLabel {
	color: #404040;
	font-size: 10pt;
}

a.radioSetCaption {
	vertical-align: top;
	text-decoration: none;
	color: #404040;
	font-size: 10pt;
}

.formLabel {
	color: #404040;
	font-size: 10pt;
	font-weight: bold;
}

a.resultsAction {
	font-size: 11px;
	color: #3b84bc;
	text-decoration: none;
}

a.resultsAction:hover {
	color: darkred;
}

td.resultsRowNo {
	color: #808080;
	text-align: left;
}

.resultsRowSelected a.resultsAction {
	color: white;
}

.resultsRowSelected a.resultsAction:hover {
	color: orange;
}

.resultsRowMouseover, .tpMouseOver {
	background: #FFEEAA;
}

/* expanded details within table */
table td.detailsBox {
	padding: 0px;
	height: 200px;
	background: white;
	border: 1px solid black;
}

table.detailsTable {
	width: 100%;
}
/* selected row after "Details" is clicked */
table tr.detailsTableHeader {
	background: rgb(47,98,128);
	color: white;
	font-size: 12px;
}

/* details pane style */
#detailsGroup {
	background: #EDECE4;
	color: #606060;
	padding-left: 5px;
	padding-right: 5px;
	overflow: auto;
	border-left: 1px solid gray;
}
#searchGroup {
	background: #EDECE4;
	padding-left: 5px;
	padding-right: 5px;
	border-right: 1px solid gray;
}

/* styles for message details */
table.AutoFormTable {
	color: #606060;
	background: white;
	border: 1px solid black;
	padding: 0px;
	font-size: 12px;
}

table td.AutoFormTableCaption {
	font-weight: bold;
	border-bottom: 1px solid darkgray;
	border-right: 1px solid darkgray;
	padding-left: 2px;
	padding-right: 2px;
}

table td.AutoFormTableValue {
	border-bottom: 1px solid darkgray;
	padding-left: 2px;
	padding-right: 2px;
}

#detailExpanderLink {
	margin-right: 5px;
}

div.dimmer
{
    visibility:hidden;
    position:absolute;
    left:0px;
    top:0px;
    width:600px;
    height:300px;
    font-family:verdana;
    font-weight:bold;
    padding:40px;
	color: #606060;
	background-color: #000;
    background-color: rgba(0,0,0,0.5);
}

table.progress
{
    position:absolute;
    left:20px;
    top:30px;
    width:518px;
    height:287px;
    font-family:verdana;
    font-weight:bold;
    padding:40px;
	color: #606060;
	background: white;
	opacity:1;
}

</style>
}

XData contentPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<pane xmlns="http://www.intersystems.com/zen">
<hgroup cellVAlign="top"  width="90%">
<hgroup id="searchGroup" valign="top">
<spacer width="20"/>
</hgroup>
<pane id="resultsPanel" paneName="resultsPane" width="600px" />
<hgroup id="detailsGroup">
<spacer width="10"/>
<pane id="detailsPanel" paneName="detailsPane"/>
</hgroup>
</hgroup>
<html>
<div id="divDimmer" class="dimmer">
<table id="tblProgressBox" class="progress">
<tr><td id="lblProgress" colspan="2">Importing...</td></tr>
<tr id ="trStatus" style="white-space:nowrap"><td id="progressText">In Progress:</td><td id="lblDuration" >0 seconds elapsed</td>
<td><image id="refreshStatus" style="display:none;" src="deepsee/loop_24.gif" class="icon" title="#(%page.tipRefresh)#" onclick="zenPage.timerStatus('',1);" onmouseover="this.className='iconHover';" onmouseout="this.className='icon';"/></td>
</tr>
<tr><td><input id="btnSubmit" type="button" value="Cancel" onclick="zenPage.progressSubmit();" style="width: 119px"/></td></tr>
</table>
</div>
</html>
</pane>
}

XData resultsPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<pane>
<vgroup valign="top">
<spacer height="10" />
<tablePane id="table" 
	cellSpacing="2"
	dataSource="columns"
	queryClass="EnsLib.EDI.X12.Schema"
	queryName="TypeCategories"
	useSnapshot="true"
	showZebra="true"
	showRowNumbers="false"
	valueColumn="Category"
	maxRows="2000"
	nowrap="false"
	onselectrow="zenPage.updateRowVals(zenThis);"
	>
<column header="Category" colName="Category" OnDrawCell="DrawHoverTitle" title="X12 Schema Category"/>
<column header="Base" colName="Base" title="Base schema used by this schema category"/>
<column header="Standard" colName="IsStandard" OnDrawCell="DrawStd" style="text-align:center;" 
	    title="Is this a standard or a custom schema category?"/>
<column header="Mode" colName="OldStyle" OnDrawCell="DrawOldStyle" style="text-align:center;"
	    title="Are 'Validation style' schema structures used to describe property paths for X12 documents in this schema category?"/>
<column header="Description" colName="Description" hidden="true"/>
</tablePane>
</vgroup>
</pane>
}

XData detailsPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<pane>
<vgroup>
<spacer height="10"/>
<tabGroup id="detailsTabGroup" hidden="false" showTabBar="true" remember="true" width="100%" onshowTab="zenPage.onTabChange();" >
<tab id="tabDocTypes" caption="DocType Structures" title="Document type structures">
<html id="htmlDocTypes" OnDrawContent="DrawDocTypesContent" />
</tab>
<tab id="tabSegments" caption="Segment Structures" title="Segment structures">
<html id="htmlSegments" OnDrawContent="DrawSegmentsContent" />
</tab>
<tab id="tabComponents" caption="Composite Structures" title="Sub-element composite data structures">
<html id="htmlComposites" OnDrawContent="DrawCompositesContent" />
</tab>
</tabGroup>
<tabGroup id="oldTabGroup" hidden="true" showTabBar="true" remember="true" width="100%" onshowTab="zenPage.onTabChange();" >
<tab id="oldTabDocTypes" hidden="false" caption="DocType Structures" title="Document type structures">
<html id="oldHtmlDocTypes" OnDrawContent="DrawDocTypesContent" />
</tab>
</tabGroup>
<spacer height="10"/>
</vgroup>
</pane>
}

/// Draw Yes or nothing in place of 1 or 0
Method DrawStd(pTable As %ZEN.Component.tablePane, pName As %String, pSeed As %String) As %Status
{
	If %query(pName) {
		Set tVal=$$$Text("Yes")
		Set tTitle=$$$Text("This is a standard schema")
	} Else {
		Set tVal="&nbsp;"
		Set tTitle=$$$Text("This is a custom schema")
	}
	Write "<div title="""_tTitle_""">"_tVal_"</div>"
	Quit $$$OK
}

/// Draw whether we will be using 'Legacy' schemas
Method DrawOldStyle(pTable As %ZEN.Component.tablePane, pName As %String, pSeed As %String) As %Status
{
	If ""=%query(pName) {
		Set tVal="&nbsp;"
		Set tTitle=$$$Text("New style and 'Validation style' schema structures both available; new style will be used unless overridden with a '-' prefix on the DocType")
	} ElseIf '%query(pName) {
		#; This will occur if the customer kills the ^EnsEDI.Schema global node or if they import from an XML file which follows our new-style representation of X12 schemas.
		#; Can't go as in-depth with validation in this case
		Set tVal="New Only"
		Set tTitle=$$$Text("'Validation style' schema structures not available for this schema category")
	} ElseIf %query(pName)<0 {
		#; This will be the case for ISC_00401 and ISC_00405, but unlikely to be others because the customer would have to kill the ^EnsEDI.X12.Schema global node to have this happen
		Set tVal=$$$Text("Legacy")
		Set tTitle=$$$Text("Only 'Validation style' schema structures are available for this schema category")
	} Else {
		Set tVal=$$$Text("Force Legacy")
		Set tTitle=$$$Text("This schema category was imported with 'Import Old' to force use of 'Validation style' schema structures unless overridden with a '+' prefix on the DocType")
	}
	Write "<div title="""_tTitle_"""><nobr>"_tVal_"</nobr></div>"
	Quit $$$OK
}

/// Draw name or name with description hover text if description is available
Method DrawHoverTitle(pTable As %ZEN.Component.tablePane, pName As %String, pSeed As %String) As %Status
{
	Set tDescription = ..EscapeHTML(%query("Description"))
	Set tName = ..EscapeHTML(%query(pName))
	Write $S(""=tDescription:tName, 1:"<div title="""_tDescription_""">"_tName_"</div>")
	Quit $$$OK
}

/// This client event, if present, is fired when the page is loaded.
/// Start the timer so we can check the status. If there is a
/// background import job currently running,
/// you will see a periodic update until the job is finished.
ClientMethod onloadHandler() [ Language = javascript ]
{
	this.invokeSuper('onloadHandler',[]);

	// Ensure that tab content is correctly initialised
	if (!this.Category || this.Category.length <= 0) {
		this.Category = '';
	}
	var table = zenPage.getComponentById('table');
	table.selectRow(zenPage.findCatRow(table,this.Category));
	this.onTabChange();

	document.getElementById('divDimmer').style.width = window.screen.width + 'px';
	document.getElementById('divDimmer').style.height = window.screen.height + 'px';

	if (zenPage.underway != '') {
		zenPage.showProgressDiv($$$FormatText($$$Text('Resuming wait for background import of file %1'),zenPage.underway));
		if (zenPage.enableAutoRefresh) {
			zenPage.startStatusTimer();
		} else {
			zenPage.timerStatus();
		}
	}
}

ClientMethod findCatRow(table, cat) [ Language = javascript ]
{
	if (cat == '' || !table || (typeof table != 'object')) { // got passed the tablePane object
		return 0;
	}
	for (var i=0; i<table.rowCount; i=i+1) {
		var row = table.getRenderedRowData(i);
		if (row.Category == cat) return i;
	}
	return 0
}

ClientMethod updateRowVals(table) [ Language = javascript ]
{
	this.Category = (table && (typeof table == 'object')) ? table.getValue() : '' // got passed the tablePane object
	this.showHideTabs(this.Category);
	this.onTabChange();
	this.updateCatGlobal(this.Category);
}

ClientMethod showHideTabs(category) [ Language = javascript ]
{
	if ((this.isOnlyOld(category)) || (category==''))  {
		zen('detailsTabGroup').setProperty('hidden',true);
		zen('oldTabGroup').setProperty('hidden',false);
	}
	else {
		zen('detailsTabGroup').setProperty('hidden',false);
		zen('oldTabGroup').setProperty('hidden',true);
	}
}

ClassMethod isOnlyOld(category) As %Boolean [ ZenMethod ]
{
	Quit $S(""=category:0,1:$D($$$vaVSchemaGbl(category)) && '$D($$$vaSchemaGbl(category)))
}

ClientMethod showProgressDiv(title) [ Language = javascript ]
{
	document.getElementById('divDimmer').style.visibility = "visible";
	var tdLbl=document.getElementById('lblProgress');
	tdLbl.innerHTML = title;
}

ClientMethod startStatusTimer(timeout) [ Language = javascript ]
{
	if (!timeout || timeout == '0' || timeout == 0) { timeout = 1000; }
	document.getElementById('btnSubmit').value=$$$Text("Cancel");
	if (this.enableAutoRefresh) {
		zenPage.statusTimerId = window.setTimeout('zenPage.timerStatus();',timeout);
	}
}

ClientMethod progressSubmit() [ Language = javascript ]
{
	if (zenPage.progressStatus == 'running') {
		zenPage.KillImport();
	} else {
		zenPage.KillImportStatus();
	}
	if ('' != zenPage.statusTimerId) window.clearTimeout(zenPage.statusTimerId);
	document.getElementById('divDimmer').style.visibility = "hidden";
	document.getElementById('trStatus').innerHTML = '<td>In Progress:</td><td id="lblDuration" >0 seconds elapsed</td>'; // restore contents after error
}

ClassMethod FileExists(filename As %String) As %String [ ZenMethod ]
{
	Quit ##class(%File).Exists(filename)
}

/// This function controls the timer on updating progress.
/// It is called from onload as well (in case a background import job is currently being run when the page is opened).
ClientMethod timerStatus(timer, refresh) [ Language = javascript ]
{
	// get and use the status of the background import job
	var status = zenPage.GetImportStatus();
	if (!status) status = 'err|' + $$$Text("Server Session Error") + '|' + $$$Text('unknown') + '|' + $$$Text('unknown');

	status=status.split('|');
	switch (status[0]) {
		case 'running':
			var durationLabel = document.getElementById('lblDuration');
			if (this.enableAutoRefresh) {
				durationLabel.innerHTML = status[2];
				document.getElementById('progressText').innerHTML = $$$Text("In Progress:");
				zenPage.startStatusTimer();
				zenPage.showProgressDiv($$$FormatText($$$Text('Importing file %1'),status[1]));
			} else {
				durationLabel.style.display = "none";
				document.getElementById('refreshStatus').style.display = "";
				document.getElementById('progressText').innerHTML = $$$Text("In progress.  Click to check if complete:");
				if ((zenPage.underway == "")||refresh) { zenPage.showProgressDiv($$$FormatText($$$Text('Importing file %1'),status[1]));}
			}
			return;
		case 'err':
		case 'error':
			document.getElementById('trStatus').innerHTML = '<td colspan=2 style=white-space:pre-wrap>'+status[3]+'</td>';
			document.getElementById('btnSubmit').value=$$$Text("OK");
			break;
		case 'done':
			document.getElementById('divDimmer').style.visibility = "hidden";
			//zen('table').renderContents();
			alert($$$FormatText($$$Text('Imported category %1 from file %2'),status[3],status[1]));
			if ('' != zenPage.statusTimerId) window.clearTimeout(zenPage.statusTimerId);
			zenPage.statusTimerId = '';
			zenPage.Category = status[3];
			zenPage.gotoPage("EnsPortal.EDI.X12.SchemaMain.zen");
			return;
		case 'idle':
			document.getElementById('divDimmer').style.visibility = "hidden";
			break;
		default:
			alert("Unexpected import status:'" + status[0] + "'");
			break;
	}
	if ('' != zenPage.statusTimerId) window.clearTimeout(zenPage.statusTimerId);
	zenPage.statusTimerId = '';
	return;
}

ClassMethod KillImport() [ ZenMethod ]
{
	Set tJob=$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","job"))
	If ""'=tJob Do $ZU(4,tJob)
	Kill ^IRIS.Temp.X12.Import($ZNSpace,$Username)
}

ClassMethod KillImportStatus() [ ZenMethod ]
{
	Kill ^IRIS.Temp.X12.Import($ZNSpace,$Username)
}

/// Use when the import job is running in the background to check on running status.
/// Returns "running", "idle", "done" or "error".
ClassMethod GetImportStatus() As %String [ ZenMethod ]
{
	Set stat = $G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status"),"undef")
	Set:stat=$$$OK tCat=$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","cat")), ^EnsPortal.Settings($Username,"X12","CurrentDrawSchema") = tCat
	Quit $Case(stat
		, "undef":"idle"
		, "":"running|"_$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","file"))_"|"_..GetRunningDuration()
		, $$$OK:"done|"_$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","file"))_"|"_..GetRunningDuration()_"|"_tCat
		,:"error|"_$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","file"))_"|"_..GetRunningDuration()_"|"_$$$StatusDisplayString(stat))
}

/// Use when the import job is running in the background to check on status.
/// Gets the number of seconds job has been running (or ran, if complete)
/// and formats it nicely as a string.
ClassMethod GetRunningDuration() As %String
{
	// Get the duration in seconds
	Set stopH = $G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","stop"))
	Set:""=stopH stopH = $H

	Set startH = $G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","start"))
	Set diff = $$$timeHDiff(stopH,startH)

	// Render the duration as desired
	Set min = diff \ 60
	Set sec = diff # 60
	If (min = 0) { Set diff = "" }
	ElseIf (min = 1) { Set diff = min_" "_$$$Text("minute") }
	Else { Set diff = min_" "_$$$Text("minutes") }
	If (sec = 1) { Set diff = diff_" "_sec_" "_$$$Text("second") }
	ElseIf (sec > 1) { Set diff = diff_" "_sec_" "_$$$Text("seconds") }

	Quit diff
}

ClientMethod doImportBrowse() [ Language = javascript ]
{
	zenPage.Status = zenPage.GetImportStatus(); // in case another page has been busy in the meantime
	var statusParts=zenPage.Status.split("|");
	if (statusParts[0] == "running") {
		alert($$$FormatText($$$Text("An import of file '%1' is currently running in the background. Please wait for it to finish."),statusParts[1]));
		self.document.location.reload(); // refresh to show statistics on import operation
		return false;
	}
	if (!this.checkEdit()) {
		return false;
	}
	if (!this.canViewFileSystem) {
		alert(this.msgNotPermitted);
		return false;
	}
	parms = {
		Dir:zenPage.GetDefaultDir(),
		wildcard:'*.XSD;*.SEF;*.X12;*.XML'
	}
	zenLaunchPopupWindow(zenLink('%ZEN.Dialog.fileSelect.zen',this.studioMode),this.addPopupSuffix('X12ImportSelect'),'status,scrollbars,resizable,width=660,height=700',parms);
	// the onPopupAction callback will be called when this dialog completes.
}

ClientMethod doImportOldBrowse() [ Language = javascript ]
{
	zenPage.Status = zenPage.GetImportStatus(); // in case another page has been busy in the meantime
	var statusParts=zenPage.Status.split("|");
	if (statusParts[0] == "running") {
		alert($$$FormatText($$$Text("An import of file '%1' is currently running in the background. Please wait for it to finish."),statusParts[1]));
		self.document.location.reload(); // refresh to show statistics on import operation
		return false;
	}
	if (!this.checkEdit()) {
		return false;
	}
	if (!this.canViewFileSystem) {
		alert(this.msgNotPermitted);
		return false;
	}
	parms = {
		Dir:zenPage.GetDefaultDir(),
		wildcard:'*.XSD;*.SEF'
	}
	zenLaunchPopupWindow(zenLink('%ZEN.Dialog.fileSelect.zen',this.studioMode),this.addPopupSuffix('X12ImportOldSelect'),'status,scrollbars,resizable,width=660,height=700',parms);
	// the onPopupAction callback will be called when this dialog completes.
}

ClientMethod doExportBrowse() [ Language = javascript ]
{
	var tbl = zen('table');
	var cat = (tbl ? tbl.getValue() : '');
	if (!cat || cat.length <= 0) {
		alert($$$Text("First select a schema category row in the table, then click Export and choose a target filename to export the schema category."));
		return;
	}
	parms = {
		Dir:zenPage.GetDefaultDir(),
		wildcard:'*.XML'
	}
	zenLaunchPopupWindow(zenLink('%ZEN.Dialog.fileSelect.zen',this.studioMode),this.addPopupSuffix('X12ExportSelect'),'status,scrollbars,resizable,width=660,height=700',parms);
	// the onPopupAction callback will be called when this dialog completes.
}

ClientMethod doDelete() [ Language = javascript ]
{
	if (!this.checkEdit()) { return false; }

	var tbl = zen('table');
	var cat = (tbl ? tbl.getValue() : '');
	if (!cat || cat.length <= 0) {
		alert($$$Text("First select a schema category row in the table, then click Delete to delete the category."));
		return;
	}
	if (0 == zenPage.CanDeleteCategory(cat)) {
		alert($$$FormatText($$$Text("Schema category '%1' cannot be deleted because it is a standard schema."),cat));
		return;
	}
	if (!confirm($$$FormatText($$$Text("Are you sure you want to delete schema category '%1'?"),cat))) {
		return;
	}
	// A category was selected and confirmed for delete
	err = zenPage.DeleteCategory(cat);
	if (err.length > 0) {
		alert(err);
	} else { // Success: refresh the table
		var old = zenSynchronousMode;
		zenSynchronousMode = true;
		var sync = tbl.executeQuery();
		tbl.selectRow(0); //select first row so deleted category not still showing
		zenSynchronousMode = old;
	}
}

Method DeleteCategory(pCategory As %String) As %ZEN.Datatype.string [ ZenMethod ]
{
	Quit:('..CanDeleteCategory(pCategory)) $$$FormatText($$$Text("Could not delete schema category '%1' because it is a standard schema."),pCategory)
	Set tKilled=$D($$$vaSchemaGbl(pCategory))||$D($$$vaVSchemaGbl(pCategory))
	Kill $$$vaSchemaGbl(pCategory), $$$vaSchemaDescGbl(pCategory), $$$vaVSchemaGbl(pCategory)
	Quit:tKilled ""
	Quit $$$FormatText($$$Text("Could not find schema category %1 to delete."),pCategory)
}

/// This client event, if present, is fired when the a popup page
/// launched from this page fires an action.
ClientMethod onPopupAction(popupName, action, value) [ Language = javascript ]
{
	if (action != "ok") {
		return false;
	}
	popupName = this.removePopupSuffix(popupName);
	switch(popupName) {
		case 'X12ImportSelect':
			if (value != '') zenPage.SetDefaultDir(value);
			if (action == 'ok') {
				var fileExists = zenPage.FileExists(value);
				if (fileExists == 0) {
					setTimeout('alert("' + $$$FormatText($$$Text("File not found: %1"),zenEscapeJS(value)) + '");', 50);
					return false;
				}
			}
			// Run SEF imports in the background because some of them take a long time
			var err = this.ImportInBackground(value,0);
			if (err != '') {
				// this return value is an error message only from LaunchMethod; ordinary errors will come from the background task
				alert(err);
				break;
			}
			if (this.enableAutoRefresh) {
				// set up a timer so we periodically check import job status until done
				var divTitle = $$$FormatText($$$Text('Importing file %1'),value);
				zenPage.startStatusTimer();
				zenPage.showProgressDiv(divTitle);
			} else {
				zenPage.timerStatus();
			}
		break;

		case 'X12ImportOldSelect':
			if (value != '') zenPage.SetDefaultDir(value);
			if (action == 'ok') {
				var fileExists = zenPage.FileExists(value);
				if (fileExists == 0) {
					setTimeout('alert("' + $$$FormatText($$$Text("File not found: %1"),zenEscapeJS(value)) + '");', 50);
					return false;
				}
			}
			// Run SEF imports in the background because some of them take a long time
			var err = this.ImportInBackground(value,1);
			if (err != '') {
				// this return value is an error message only from LaunchMethod; ordinary errors will come from the background task
				alert(err);
				break;
			}
			if (zenPage.enableAutoRefresh) {
				// set up a timer so we periodically check import job status until done
				var divTitle = $$$FormatText($$$Text('Importing file %1'),value);
				zenPage.startStatusTimer();
				zenPage.showProgressDiv(divTitle);
			} else {
				zenPage.timerStatus();
			}
		break;

		case 'X12ExportSelect':
			setTimeout(function() {
				zenPage.doExport(value);
			}, 50);
		break;
		case 'switchNamespace':
			zenPage.changeURLNamespace(value);
		break;
	}
	return true;
}

ClientMethod doExport(filename) [ Language = javascript ]
{
	var fileExists = zenPage.FileExists(filename);
	if (fileExists != 0) {
		var ok = confirm($$$FormatText($$$Text("Are you sure you want to overwrite %1?"),filename));
		if (!ok) {
			return;
		} else {
			var status = zenPage.setProperty('Filename',filename);
		}
	}
	if (filename!="") zenPage.SetDefaultDir(filename);
	var tbl = zen('table');
	var cat = tbl.getValue();
	var err = zenPage.ExportCategory(cat,filename);
	if (err == '') {
		alert($$$FormatText($$$Text("Exported X12 schema category %1 to file %2"), cat, filename));
	} else {
		alert(err);
	}
}

ClassMethod CanDeleteCategory(pCat As %String) As %String [ ZenMethod ]
{
	Quit '((+$G($$$vaSchemaDescGbl(pCat,"std"))) || (+$G($$$vaVSchemaGbl(pCat,"std"))))
}

ClassMethod GetDefaultDir() As %String [ ZenMethod ]
{
	Quit $G(^EnsPortal.Settings($Username,"ImportExportDir"))
}

ClassMethod SetDefaultDir(pPathname As %String) [ ZenMethod ]
{
	Set ^EnsPortal.Settings($Username,"ImportExportDir") = ##class(%File).GetDirectory(pPathname, 1)
}

/// Run method Import() in a background job. Return 1 if this works out ok, an error string if there is an error in launching the job.
ClassMethod ImportInBackground(pFilename As %String, pUseOld As %Boolean) As %ZEN.Datatype.string [ ZenMethod ]
{
	Set tSC = ..LaunchMethod("Import",pFilename,pUseOld)
	Quit:$$$ISOK(tSC) ""
	Quit $$$StatusDisplayString(tSC)
}

/// Runs in a background job launched from the method DoImportInBackground()
ClassMethod Import(pFilename As %String, pUseOld As %Boolean)
{
	try {
		If '##class(%File).Exists(pFilename) {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Unable to open file '"_pFilename_"'")
		} Else {
			// Lock and set globals
			Lock +^IRIS.Temp.X12.Import($ZNSpace,$Username,"status"):2  Set tOK=$Test
			If '$Test  set tSC=$$$ERROR($$$GeneralError,"Cannot acquire lock to start importing file")  Quit

			Kill ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")=""
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","file")=pFilename
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","start")=$H
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","job")=$J

			// Run the Import method
			If ".SEF"=$ZCVT($E(pFilename,*-3,*),"U") {
				Set tSC = ##class(EnsLib.EDI.SEF.Compiler).Import(pFilename,"X12",.tCatImported,.tValidationErrors,pUseOld)
			} ElseIf ".XSD"=$ZCVT($E(pFilename,*-3,*),"U") {
				Set tSC = ##class(EnsLib.EDI.X12.SchemaXSD).Import(pFilename,,pUseOld,.tCatImported)
			} Else {
				Set tSC = ##class(EnsLib.EDI.X12.SchemaXML).Import(pFilename,.tCatImported)
			}
			// Set and unlock globals
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","stop")=$H
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","cat")=$G(tCatImported)
			Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")=tSC
			Kill ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","job")
			Lock -^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")
		}
	} catch {
		Lock -^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")
		Set tSC=$$$SystemError
	}
	Set ^IRIS.Temp.X12.Import($ZNSpace,$Username,"status")=tSC
}

ClassMethod LaunchMethod(pMethod As %String, args...) As %Status [ Final, Internal ]
{
	try {
		#; construct expression to run background method
		Set tExpr = "Job ##class("_$this_")."_pMethod_"("
		Set tArgC = $O(args(""),-1)
		Set tArgList = ""
		For k = 1:1:tArgC {
			Set tArg = $S($D(args(k)):$$$quote(args(k)),1:"")
			Set tArgList = tArgList _ $S(tArgList="":"",1:",") _ tArg
		}
		Set tExpr = tExpr _ tArgList _ ")"

		#; job off method
		X tExpr
		//Set ..BGJob=$ZChild
		
		Set tSC=$$$OK
	} catch {
		Set tSC=$$$SystemError
	}
	Quit tSC
}

Method ExportCategory(pCategory As %String, pFilename As %String) As %ZEN.Datatype.string [ ZenMethod ]
{
	Set tSC=$System.OBJ.Export(pCategory_".X12",pFilename,"-d")
	Quit:$$$ISOK(tSC) ""
	Quit $$$FormatText($$$Text("Error exporting X12 Schema category '%1' to file %2: "),pCategory,pFilename)_$$$StatusDisplayString(tSC)
}

/// User clicked on a tab, or selected a new item, so we need to fetch the required content from the server.
ClientMethod onTabChange() [ Language = javascript ]
{
	var btn = document.getElementById('command_cmdDelete')
	if (btn && this.Category!='') {
		if (0 != this.CanDeleteCategory(this.Category)) {
			btn.className = 'commandButton';
			btn.title = 'Delete a schema category definition';
		} else {
			btn.className = 'commandButtonDisabled';
			btn.title ='Cannot delete schema category because it is a standard schema';
		}
	}

	this.layoutTabGroup();
	var tabGroup = (zen('detailsTabGroup').getProperty('hidden')) ? zen('oldTabGroup') : zen('detailsTabGroup');
	var currTab = tabGroup.getCurrTabNo();
	if (!this._tabDisplay) {
		this._tabDisplay = new Object();
	}
	var tabName;
	if (zen('detailsTabGroup').getProperty('hidden')) {
		switch (currTab) {
			case 1: tabName='oldHtmlDocTypes'; break;
			default: tabName='';
		}
	}
	else {
		switch (currTab) {
			case 1: tabName='htmlDocTypes'; break;
			case 2: tabName='htmlSegments'; break;
			case 3: tabName='htmlComposites'; break;
			default: tabName='';
		}
	}
	tabGroup.currTabName=tabName;

	if (tabName != '') {
		if (this._tabDisplay[tabName] != this.Category) {
			this.drawTabDetails(this.Category,tabName);
			this._tabDisplay[tabName] = this.Category;
		}
	}
}

ClassMethod updateCatGlobal(category As %String = "") [ ZenMethod ]
{
	Set ^EnsPortal.Settings($Username,"X12","CurrentDrawSchema") = category
}

ClientMethod drawTabDetails(row As %String, tabName As %String) [ Language = javascript ]
{
	var details = zen(tabName);
	if ((row == '') || (row == null)) {
		details.seed = '';
	} else {
		details.seed = row
	}
	details.refreshContents(true);
}

/// Handle the client-side rendering the of the right hand pane.
/// This is primarily due to IE as it shrinks the contents div without this intervention.
/// The function only adjusts the size of the tab group if not hidden.
ClientMethod layoutTabGroup() [ Language = javascript ]
{
	var detailsGroup = zen('detailsGroup');
	var detailsDiv = detailsGroup.getEnclosingDiv();
	var detailsTabGroup = zen('detailsTabGroup');
	var tabsDiv = detailsTabGroup.getEnclosingDiv();
	var oldTabGroup = zen('oldTabGroup');
	var oldTabDiv = oldTabGroup.getEnclosingDiv();

	var winHeight = zenGetWindowHeight();

	var detailsPanel = zen('detailsPanel');
	var detailsDiv = detailsPanel.getEnclosingDiv();
	var paneWidth = detailsDiv.offsetWidth;

	var tabBar = detailsTabGroup.getTabBarElement();
	var hgt = winHeight - this.getTitleAreaHeight() - tabBar.offsetHeight;
	tabsDiv.style.height = hgt + 'px';
	oldTabDiv.style.height = hgt + 'px';

	// prevent IE resize logic
	detailsTabGroup.ieResizeBody = function() { return; };
	oldTabGroup.ieResizeBody = function() { return; };

	var winWidth = zenGetWindowWidth();
	var searchPanel = zen('searchGroup').getEnclosingDiv();
	var resultsPanel = zen('resultsPanel').getEnclosingDiv();

	var tabsWidth = winWidth - searchPanel.offsetWidth - resultsPanel.offsetWidth - 50;
	detailsTabGroup.setBodySize(hgt - 50, tabsWidth);
	oldTabGroup.setBodySize(hgt - 50, tabsWidth);
	//tabsDiv.style.width = detailsDiv.style.width + 'px';
}

ClassMethod DrawDocTypesContent(pCat As %String) As %Status
{
	Quit ..DrawSchemaList(pCat,"DS",$$$FormatText($$$Text("X12 DocType structures in Category <b>%1</b>"),pCat))
}

ClassMethod DrawSegmentsContent(pCat As %String) As %Status
{
	Quit ..DrawSchemaList(pCat,"SS",$$$FormatText($$$Text("X12 segment structures in Category <b>%1</b>"),pCat))
}

ClassMethod DrawCompositesContent(pCat As %String) As %Status
{
	Quit ..DrawSchemaList(pCat,"CS",$$$FormatText($$$Text("X12 composite data type structures in Category <b>%1</b>"),pCat))
}

ClassMethod DrawSchemaList(pCat As %String, pElement As %String, pTitle As %String) As %Status
{
	Quit:((pCat="")||(pElement="")) $$$OK
	//Set ^EnsPortal.Settings($Username,"X12","CurrentDrawSchema") = pCat

	// set up values needed in main loop
	Set elementsPerRow = 6
	Set max=0, nextVal=""
	If pElement="DS" && '$D($$$vaSchemaGbl(pCat)) {
		Set k="" For { Set k=$O($$$vaVSchemaGbl(pCat,k))  Quit:""=k  Continue:":SEF"=k||("std"=k)  Set tSorted(" "_$zcvt(k,"U"))=k }
		Set next=$O(tSorted(""),1,nextVal)
		Set tDesc=..EscapeHTML(##class(EnsLib.EDI.SEF.Schema).GetDescription("IG:"_pCat))
		Set linkName=""
		Set zenPage="EnsPortal.EDI.ValidationStructure"
	} Else {
		Set k="" For { Set k=$O($$$vaSchemaGbl(pCat,pElement,k))  Quit:""=k  Set tSorted(" "_$zcvt(k,"U"))=k }
		Set next=$O(tSorted(""),1,nextVal)
		Set tDesc=..EscapeHTML($G($$$vaSchemaDescGbl(pCat)))
		Set linkName=$Case(pElement,
			"DS":"DocumentStructure",
			"SS":"SegmentStructure",
			"CS":"ComponentStructure",
			  :"UnknownStructure")
		Set zenPage="EnsPortal.EDI.X12.Schema"_linkName
	}
	Set n1st=$ZCVT($E(nextVal),"U")
	Set cellContent = n1st
	Set lineNum=1

	// display all the items
	&html<
		<div style="padding:10px 0px 10px 0px">#(pTitle_$S(""=tDesc:"",1:"<br/><i>"_tDesc_"</i>"))#</div>
		<table cellpadding=0 cellspacing=0>
			<tr>
				<td valign="top" class="alphaEntry">#(cellContent)#&nbsp;</td>
				<td>
					<table class="tpTable" cellpadding=4 cellspacing=0>
	>

	For itemCount=1:1 {
		Set item=next, i1st=n1st
		Quit:item=""
		Set itemVal=nextVal, next=$O(tSorted(next),1,nextVal)
		If linkName="" {
			Set tDesc=..EscapeHTML(##class(EnsLib.EDI.SEF.Schema).GetDescription("TS:"_pCat_":"_itemVal))
			Set fullLink = ..Link(zenPage_".zen?DocType="_$$$URLENCODE(pCat_":"_itemVal))
		} Else {
			Set tDesc=..EscapeHTML(##class(EnsLib.EDI.X12.Schema).GetDescription(pElement_":"_pCat_":"_itemVal))
			Set fullLink = ..Link(zenPage_".zen?"_pElement_"="_$$$URLENCODE(pElement_":"_pCat_":"_itemVal))
		}
		Set n1st=$ZCVT($E(nextVal),"U")
		If itemCount=1 { // start the row
			&html<<tr>>
		}
		Set:itemCount>max max=itemCount
		Set tooltip = $S(""'=tDesc:tDesc, 1:pElement_":"_pCat_":"_itemVal)
		&html<<td><a title='#(tooltip)#' href='#(fullLink)#'>#(itemVal)#</a></td>>

		If i1st'=n1st { // there are no more items left 

			// reset the counters
			Set max=0,itemCount=0
			Set lineNum = 1

			// finish the inner row, inner table, outer row; do spacer row; start next row and entry
			&html<
				</tr></table></td></tr><tr><td>&nbsp;</td></tr>
				<tr>
					<td valign="top" class="alphaEntry">#(n1st)#&nbsp;</td>
					<td>
						<table class="tpTable" cellpadding=4 cellspacing=0>
				>
		}
		ElseIf (itemCount#elementsPerRow=0) { // reached max elements in row, but there are more items left
			Set itemCount=0
			Set lineNum = lineNum + 1

			&html<</tr>#($C(13,10))#>
		}
	} //end For itemCount

	&html<</tr></table></td></tr></table>>
	Quit $$$OK
}

/// Get the (localized) name of the page.
Method %OnGetPageName() As %String
{
	Quit $$$Text("X12 Schemas")
}

/// Get information to display in the ribbon bar.
Method OnGetRibbonInfo(Output pDisplay As %Boolean, Output pViewIcons As %List, Output pSortOptions As %List, Output pSearchBox As %Boolean, Output pRibbonTitle As %String, Output pCommands As %List) As %Status
{
	Set pDisplay = 1
	Set pSearchBox = 0
	Set pRibbonTitle = ..%OnGetPageName()

	// commands: $LB(id,caption,help,onclick)
	Set pCommands(1) = $LB("cmdImport",$$$Text("Import"),$$$Text("Import a new schema definition from a SEF, XSD, or XML file"),"zenPage.doImportBrowse();")
	Set pCommands(2) = $LB("cmdImportOld",$$$Text("Import Old"),$$$Text("Import a SEF or XSD schema definition and flag it to force use of the old style 'validation' schema structure"),"zenPage.doImportOldBrowse();")
	Set pCommands(3) = $LB("cmdExport",$$$Text("Export"),$$$Text("Export a schema definition category to an XML file"),"zenPage.doExportBrowse();")
	Set pCommands(4) = $LB("cmdDelete",$$$Text("Delete"),$$$Text("Delete a schema definition category"),"zenPage.doDelete();")
	Quit $$$OK
}

/// Decorate the page.
Method %OnAfterCreatePage() As %Status
{
	Set tSC = ##super()  Quit:$$$ISERR(tSC) tSC

	Set ..HelpAddress = $$$PRODUCT2 _ ", X12 Schemas"
	If ..Category="" && $D(^EnsPortal.Settings($Username,"X12","CurrentDrawSchema")) {
		Set ..Category = ^EnsPortal.Settings($Username,"X12","CurrentDrawSchema")
	}
	// If we have a non-empty or undefined status we are not underway
	Set ..underway = $S((""=$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status"),"undef")):$G(^IRIS.Temp.X12.Import($ZNSpace,$Username,"status","file")),1:"")

	Quit tSC
}

/// Callback to return a list of resources required for a specific HyperEvent.
/// The user must have sufficient privileges on one of the resource/permission pairs
/// to be permitted to execute the hyperevent. An empty string implies the user already
/// has sufficient privileges for the ZenMethod specified in <var>pMethod</var>.
ClassMethod GetHyperEventResources(pMethod As %String = "") As %String
{
	Quit $case(pMethod,
					"ImportInBackground": ..#EDITRESOURCE,
					"DeleteCategory": ..#EDITRESOURCE,
					: "")
}

}
