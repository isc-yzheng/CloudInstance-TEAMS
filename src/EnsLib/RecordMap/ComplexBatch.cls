/* Copyright (c) 2020 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

Include EnsRecordMap

Class EnsLib.RecordMap.ComplexBatch Extends (%Persistent, EnsLib.RecordMap.ComplexParent) [ NoExtent, PropertyClass = EnsLib.RecordMap.ComplexBatchPropertyParameters, System = 4 ]
{

/// Parameter to indicate that the class has been generated by the RecordMap framework.
/// If this parameter is set to 0, the RecordMap framework will NOT update this class automatically,
/// and responsibility for any further changes will fall on the user.
Parameter RECORDMAPGENERATED = 1;

Parameter XMLIGNORENULL = 0;

/// Name of source document or connection from which this record was created.
Property %Source As %String(MAXLEN = 2000, TRUNCATE = 1, XMLPROJECTION = "NONE");

Method %OnValidateObject() As %Status [ Private, ServerOnly = 1 ]
{
	If $get(%EnsRecordMap("StrictValidation")) Quit ..ValidateObject()
	Quit $$$OK
}

/// Ensure that we update all references before we save the batch.
Method %OnBeforeSave(insert As %Boolean) As %Status [ Private, ServerOnly = 1 ]
{
	Quit ..UpdateReferences()
}

/// Ensure that we remove all references to child objects and delete any objects that aren't
/// referenced by any complex parents.
ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Private, ServerOnly = 1 ]
{
	Set tID = $$$oidPrimary(oid)
	Quit ..DeleteRecords(tID)
}

/// Ensure that we remove all references to child objects and delete any objects that aren't
/// referenced by any complex parents.
Trigger OnDelete [ Event = DELETE ]
{
	Set %ok = ..DeleteRecords({ID})
}

}
