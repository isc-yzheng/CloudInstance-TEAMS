/* Copyright (c) 2020 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

/// Abstract base class for classes generated to contain data fields mapped from external record formats.
/// This is predominantly to allow for simple listing of those objects, but users may extend this class
/// if they wish to map external data to existing classes.
/// If the existing data is intended for inclusion in a Batch object and RECORDMAPGENERATED is set to 0,
/// the class must define a one-to-many relationship called %ParentBatch with an inverse of Records
/// AND an index on this property to conform to the standard Batch structures.
/// See the documentation for the RECORDMAPGENERATED parameter for more information.
Class EnsLib.RecordMap.Base [ Abstract, System = 4 ]
{

/// Parameter to indicate whether a Record class has been generated by EnsLib.RecordMap.Generator.
/// If users wish to map data to existing classes, or ensure that the Generator does not overwrite
/// their existing class, this parameter should be left as 0.
/// Classes which have the parameter set to 1 are subject to updates by the RecordMap framework.
Parameter RECORDMAPGENERATED = 0;

/// Ensure RecordMap classes use the default XMLIGNORENULL behaviour for XML import and export.
/// This parameter is set to 1 in Ens.MessageBody.
Parameter XMLIGNORENULL = 0;

/// Name of source document or connection from which this record was created.
Property %Source As %String(MAXLEN = 2000, XMLPROJECTION = "NONE");

/// Returns the same value as <method>%Id</method>(), but will force a new ID value if an ID hasn't been assigned yet
/// AND the class hasn't specified a different IdKey.
Method %ForceId() As %String [ CodeMode = objectgenerator ]
{
	If $$$comMemberDefined(%class.Name,$$$cCLASSmethod,"%Id") {
		Set tIdKeyExists = 0
		For i=1:1:%compiledclass.Indices.Count() {
			Set tIndex = %compiledclass.Indices.GetAt(i)
			If tIndex.IdKey && 'tIndex.SystemAssigned {
				Set tIdKeyExists = 1
				Quit
			}
		}
		If 'tIdKeyExists {
			Set tIDLocation = $get($$$EXTidlocation($$$pEXT,%class.Name))
			If (tIDLocation '= "") {
				Do %code.WriteLine($char(9) _ "If (..%Id() = """") Do ..%IdSet($increment(" _ tIDLocation _"))")
			}
		}
		Do %code.WriteLine($char(9) _ "Quit ..%Id()")
	}
	Else {
		Do %code.WriteLine($char(9) _ "Quit """"")
	}
	Quit $$$OK
}

}
