Include SchemaMap

/// manages export to and from files for various purposes,
/// related to developer collaboration and Perforce storage of shared work
Class SchemaMap.Tool.Build.Export [ Abstract ]
{

ClassMethod ProjectFiles() As %Status
{
}

ClassMethod JSONFiles(dirName As %String = "") As %Status
{
}

ClassMethod CSVFiles(dirName As %String = "") As %Status
{
}

/// Outputs a set of report files of all types in HTML format.
/// The resulting HTML-formatted text can be printed, viewed in a browser, 
/// or read from the file to provide content for a UI page, as desired.
/// <p>
/// If the arguments from and to are both supplied, 
/// output only the set of reports for that specific schema pair and direction of mapping.
/// <p>
/// If either the input argument from or to is omitted, 
/// output a set of reports of ALL types for ALL mappings between 
/// ALL schema pairs configured for Schema Mapper.
/// <p>
/// Because of the high volume of data that can be generated by HTML formatting, 
/// this method internally handles the HTML content line by line, not in one chunk. 
/// This avoids any possibility of breaking the 32K barrier on character count for string values.
ClassMethod ReportFiles(from As %String = "", to As %String = "") As %Status
{
}

ClassMethod WriteTableStyle(file As %Library.File) As %Status
{
}

ClassMethod ReportPriority(dirName As %String = "") As %Status
{
}

ClassMethod ReportIssues(from As %String = "", to As %String = "", dirName As %String = "", reportType As %String(VALUELIST=",Clinical,Non-clinical") = "Clinical") As %Status
{
}

/// Calculate listIssues and listCount entries for the missing required targets issue X,
/// which unlike other issues is based on mapping rows that do not exist.
ClassMethod BuildMissingTargetsEntry(listIssues, listCount, from As %String = "", to As %String = "", reportType As %String(VALUELIST=",Clinical,Non-clinical") = "Clinical") As %Status
{
}

ClassMethod ReportCodeLookup(from As %String = "", to As %String = "", dirName As %String = "") As %Status
{
}

/// One call with direction "forward" is expected first, followed by one call with direction "reverse".
/// Both "forward" and "reverse" calls are expected even if there is no matched pair. 
/// The fromPath and toPath are not used when direction is "reverse".
ClassMethod DrawLookupTableEntry(direction As %String(VALUELIST=",forward,reverse") = "", from As %String = "", to As %String = "", fromPath As %String = "", toPath As %String = "", sourceLookupName As %String = "", targetLookupName As %String = "", Output noteText As %String = "") As %Status
{
}

/// Calculate listIssues and listCount entries for informational issues based on a schema table.
ClassMethod BuildSchemaInfoEntry(listIssues, listCount, schema As %String = "", from As %String = "", to As %String = "") As %Status
{
}

ClassMethod ReportInformational(from As %String = "", to As %String = "", dirName As %String = "") As %Status
{
}

ClassMethod ReportDefaultReview(from As %String = "", to As %String = "", dirName As %String = "", reportType As %String(VALUELIST=",Clinical,Non-clinical") = "Clinical", issueType As %String(VALUELIST=",Provided,Missing") = "Provided") As %Status
{
}

/// There are two reports, one listing DTL data transformations that are in this kit 
/// and one for transformations that are not in this kit. The list is by resource, with no field details.
/// In each report, there is a list organized by target resources and a list organized by source resources.
ClassMethod ReportTransforms(from As %String = "", to As %String = "", dirName As %String = "") As %Status
{
}

/// There are two reports, one listing DTL data transformations that are in this kit
/// and one for transformations that are not in this kit. The list is by resource, with no field details.
/// In each report, there is a list organized by target resources and a list organized by source resources.
ClassMethod ReportNotTransformed(from As %String = "", to As %String = "", dirName As %String = "") As %Status
{
}

}
