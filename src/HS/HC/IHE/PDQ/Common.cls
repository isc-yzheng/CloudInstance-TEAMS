Include Ensemble

Class HS.HC.IHE.PDQ.Common Extends HS.HC.Util.Trace.Helper [ Abstract ]
{

Parameter HSDEPLOY = 1;

/// Used in a testing environment allows setting of the AffinityDomain Code (which must be defined in the OID Registry) if not
/// set the value from ##class(HS.IHE.Util).GetAffinityDomain() is used
Property AffinityDomain As %String;

/// Used to determine whether AffinityDomain is the MPIID (true - general scenario) or whether the MPIID is in the results (typically IHE testing)
Property AffinityDomainIsMPIID As %Boolean [ InitialExpression = 1 ];

/// If true, patient search requests generated by this process will be processed by consent.
Property ApplyConsent As %Boolean [ InitialExpression = 0 ];

Property MPIOperations As Ens.DataType.ConfigName [ InitialExpression = "HS.Hub.MPI.Manager" ];

Property Errors As HS.Types.IHE.Errors;

/// Applicable to PDQv3 only.  When true, search match rank values
/// are multiplied by 100, to help avoid decimal rank values. PDQv3
/// and XCPD queryMatchObservation/value/@value is required to be
/// integer.  Whether multiplied or not, if a rank value still has
/// a decimal portion, then that decimal portion is truncated away.
Property ApplyRankMultiplier As %Boolean [ InitialExpression = 0 ];

/// SendAndFilter is called by QueryRequestv2, QueryRequestv3 and QueryRequestFHIR.
/// It sends the PatientSearchRequest to the MPIOperations, gets the response,
/// applies domain filters as needed and calls the query queue logic that is
/// common to all queries.
Method SendAndFilter(pSearchRequest As HS.Message.PatientSearchRequest, Output pQueueObject, pMsgType As %String) As %Status
{
	#dim eException As %Exception.AbstractException
	try {
		Set tSeverityError = $Select(pMsgType="v3":"Error",pMsgType="v2":"E",pMsgType="FHIR":"error",1:"E")
		Set tErrorCodeValue = $Select(pMsgType="v3":"204",pMsgType="v2":"204",pMsgType="FHIR":"value",1:"204")
		Set tErrorCodeException = $Select(pMsgType="v3":"204",pMsgType="v2":"204",pMsgType="FHIR":"exception",1:"204")
		
		#; do loop to allow for Quit when errors are encountered
		Do {
			If pSearchRequest.MRN]"" && (pSearchRequest.AssigningAuthority]"") {
				If pSearchRequest.AssigningAuthority = ..AffinityDomain {
					Set pSearchRequest.MPIID=pSearchRequest.MRN
					Set (pSearchRequest.MRN,pSearchRequest.AssigningAuthority)=""
				} Else {
					Set tPatient = ##class(HS.Registry.Patient).GetRecordForMRN(pSearchRequest.AssigningAuthority,pSearchRequest.MRN)
					If $isObject(tPatient) {
						Set pSearchRequest.MPIID=tPatient.MPIID
						Set (pSearchRequest.MRN,pSearchRequest.AssigningAuthority)=""
					}
				}
			}

			If pSearchRequest.AdditionalInfo.GetAt("QueryExtension")'="" {
				Set pQueueObject.QueryID=pSearchRequest.AdditionalInfo.GetAt("QueryID")_"::"_pSearchRequest.AdditionalInfo.GetAt("QueryExtension")
			} Else {
				Set pQueueObject.QueryID=pSearchRequest.AdditionalInfo.GetAt("QueryID")
			}
			Set pQueueObject.InitialQuantity=pSearchRequest.AdditionalInfo.GetAt("InitialQuantity")
			Set tSC=pQueueObject.%ValidateObject() 
			#; make sure we have a valid query id before continuing
			If $$$ISERR(tSC) Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Unable to validate query request:"_$system.Status.GetErrorText(tSC)) Quit
			Set pQueueObject.SearchRequest=pSearchRequest
		
			#; ensure we know all scoping id's	
			If pSearchRequest.AdditionalInfo.IsDefined("ScopingOrganizations") {
				Set (tNodeStart,tNode) = "scopingOrganization_"
				For  {
					Do pSearchRequest.AdditionalInfo.GetNext(.tNode) Quit:tNode=""
					Set tCode=$p(tNode,tNodeStart,2)
					If tCode="" Quit
					Set tOID=##class(HS.Data.OIDMap).GetOIDForCode(tCode,"")
					$$$HSTRACE("Evaluating scoping organization","tOID,tCode",tOID,tCode)
					If tOID="" {
						If pMsgType="v2" Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Scoping OID not found for:"_tCode,"QPD:8")
						If pMsgType="v3" Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Scoping OID not found for:"_tCode,"/")
						If pMsgType="FHIR" Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Scoping OID not found for:"_tCode,"")
						Continue
					}
				}
			}
			If ..Errors.Errors.Count() Quit

			#; take the PatientSearchRequest and execute 
			Set tSC = ..SendQueryRequest(pSearchRequest,.tSearchResponse)
			If $$$ISERR(tSC) Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Unable to execute query request:"_$system.Status.GetErrorText(tSC)) Quit

			Set pQueueObject.SearchResponse = tSearchResponse
			#; filter based on SRCH parameter, Other scoping ID's
			Set tSC = ..FilterQueryResponse(pSearchRequest,.pQueueObject)
			If $$$ISERR(tSC) Do ..Errors.logError(tErrorCodeValue,tSeverityError,"Unable to filter query response:"_$system.Status.GetErrorText(tSC)) Quit
		} While 0
	} Catch eException {
		Set tSC=eException.AsStatus()
		Do ..Errors.logError(tErrorCodeException,$Get(tSeverityError),$system.Status.GetErrorText(tSC)) 	
	}
	Quit tSC
}

/// take PDQ Query request and issue a PatientSearchRequest to the MPIOperation
Method SendQueryRequest(pSearchRequest As HS.Message.PatientSearchRequest, Output pSearchResponse As HS.Message.PatientSearchResponse) As %Status
{
	#dim eException As %Exception.AbstractException
	try {
		Set tSC=..SendRequestSync(..MPIOperations,pSearchRequest,.pSearchResponse)
	} catch eException {
		Set tSC=eException.AsStatus()
		Do ..Errors.logError("204","Error",$system.Status.GetErrorText(tSC))
	}
	Quit tSC
}

/// take executed query response (pQueueObject.SearchResponse) for collection produce a set of
/// patients (based on MPIID).  For subsequent rows related to same MPIID add ID information to
/// the IDs collection.  Take resulting matched rows and put into pQueueObject.SearchResponse 
Method FilterQueryResponse(pSearchRequest As HS.Message.PatientSearchRequest, pQueueObject) As %Status
{
	#dim eException As %Exception.AbstractException
	#define aryTemp ^||AryHaveMPIID
	
	Set tSC=$$$OK
	try {
		#; 
		$$$HSTRACE("In filter request")
		Kill $$$aryTemp
		Set pRequest = pQueueObject.SearchRequest
		Set tResponse = pQueueObject.SearchResponse
		Set tFilteredResponse = tResponse.%New()
		Set pQueueObject.SearchResponse=tFilteredResponse
		Set (tMinRank,pQueueObject.MinRank) = pRequest.AdditionalInfo.GetAt("MinMatchScore")
		Set tCounter=0
		Set tExact='(pRequest.AdditionalInfo.GetAt("nameSRCH")]"")

		/* need to add the mpi id
			need to consolidate to a single person
			remove any ids which are not in the scoping
			return the preferred demographics if more than 1
			*/

		Set tScopingOrganizationsCheck = pSearchRequest.AdditionalInfo.IsDefined("ScopingOrganizations")
		Set tReceiverDevice=##class(HS.Data.OIDMap).GetCodeForOID(pSearchRequest.AdditionalInfo.GetAt("receiverDeviceOID"))
		For tMPIIdx = 1:1:tResponse.MPIIDList.Count() {
			Set tMPIItem = tResponse.MPIIDList.GetAt(tMPIIdx)
			Set tMPIID = tMPIItem.MPIID
			$$$HSTRACE("MatchScore","Rank,MinMatchScore",tMPIItem.Rank,tMinRank)
			If tMinRank && ( tMPIItem.Rank< tMinRank) {
				$$$HSTRACE("Item "_tMPIIdx_" Removed because of rank") Continue
			}
			Kill $$$aryTemp("ID")
			Set tMatches = tMPIItem.SearchMatches
			Set tIDs=""
			#; if no receiver device use first demographics
			Set tMain = ""
			For tIdx = 1:1:tMatches.Count() {
				Set tItem = tResponse.Results.GetAt(tMatches.GetAt(tIdx))
				If tIdx=1 Set tFirst = tItem,tMatchResult = ##class(HS.Message.IHE.PatientSearchMatch).%New()

				Set tAddID = $$AddID(tItem.AssigningAuthority, tItem.MRN,tScopingOrganizationsCheck,pSearchRequest)

				If tAddID ="" {
					$$$HSTRACE("Item "_tIdx_" removed because of scoping oid ["_tItem.AssigningAuthority_"]") Continue
				} Else {
					If (tReceiverDevice = tItem.Facility) {
						$$$HSTRACE("Defining Main ",tItem)
						Set tMain=tItem
						Do tMatchResult.IDs.InsertAt(tAddID,1)
					} Else {
						Do tMatchResult.IDs.Insert(tAddID)
					}
					$$$HSTRACE("Adding ID","tAddID",tAddID)
				}

				#; also insert the identifiers collection
				For tIdx2 = 1:1:tItem.Identifiers.Count() {
					Set tIdentifierObject = tItem.Identifiers.GetAt(tIdx2)
					Set tAddID = $$AddID(tIdentifierObject.Root, tIdentifierObject.Extension,tScopingOrganizationsCheck,pSearchRequest)
					If tAddID]"" {
						$$$HSTRACE("Adding Additional Identifer:"_tMPIID_":"_tIdentifierObject.Root_":"_tIdentifierObject.Extension)
						Do tMatchResult.IDs.Insert(tAddID)
					}
				}

			}
			#; add the mpiid
			Set tAddID = $$AddID(..AffinityDomain, tMPIID,tScopingOrganizationsCheck,pSearchRequest)
			If tAddID]"" {
				$$$HSTRACE("Adding MPIID:"_tMPIID_":"_..AffinityDomain)
				Do tMatchResult.IDs.Insert(tAddID)
			} Else {
				$$$HSTRACE("MPIID not added:"_tMPIID_":"_..AffinityDomain)
			}
			#; add the SSN
			set tAddID = $$AddID("SSN",tItem.SSN,tScopingOrganizationsCheck,pSearchRequest)
			If tAddID ="" {
				$$$HSTRACE("SSN not added: "_tItem.SSN)
			} Else {
			   $$$HSTRACE("Adding SSN:  "_tItem.SSN)
			} 
			#; if no IDs found there is nothing to do			
			If 'tMatchResult.IDs.Count() Continue
			#; if no record found for receiver device, pick the first one
			If tMain="" Set tMain=tFirst

			#; check to see if query is limited by by exact match (no <value use="SRCH"/>
			If tExact {
				If pRequest.LastName]"",$zcvt(tMain.LastName,"l")'=$zcvt(pRequest.LastName,"l") {
					$$$HSTRACE("Removing Patient due to name search to exact match") Continue
				}
				If pRequest.FirstName]"",$zcvt(tMain.FirstName,"l")'=$zcvt(pRequest.FirstName,"l") {
					$$$HSTRACE("Removing Patient due to name search to exact match") Continue
				}
			}

			#; if scoped by LivingSubjectID's then all ID's must exist in the record being returned
			If pSearchRequest.AdditionalInfo.IsDefined("LivingSubjectIDs") {
				Set tFilter = 0
				Set (tNodeStart,tNode) = "livingSubjectId_"
				For  {
					Do pSearchRequest.AdditionalInfo.GetNext(.tNode) Quit:tNode=""
					Set tID=$p(tNode,tNodeStart,2)
					Set tRoot=$p(tID,"_"),tExtension=$p(tID,"_",2)
					If (tRoot]"" && (tExtension]"")) && ('$D($$$aryTemp("ID",tRoot,tExtension))) {
						$$$HSTRACE("Item "_tMPIID_" removed because of LivingSubject ID "_tRoot_","_tExtension) 
						Set tFilter=1 Quit
					}
				}
				If tFilter Continue
			}

			#; for any scoping ID requested we must include it in the list of ID's in the response (scope by 1.2.3 and 3.4.5 if only id 1.2.3/123 we return 4.5.6 with a null id)
			Set tScope=""
			For  {
				Set tScoping=$o(tScoping(tScope)) Quit:tScope=""
				If $D($$$aryTemp("ID",tScope)) Continue
				Set tAddID = $$AddID(tScope, "",tScopingOrganizationsCheck,pSearchRequest)
				Do tMatchResult.IDs.Insert(tAddID)
				$$$HSTRACE("Inserting Scope","tMatch",tAddID)
			}
			Set tMain.IDs=tMatchResult.IDs
			
			#; Apply a multiplier to RankOrScore if indicated
			#; by ApplyRankMultiplier.  Strip decimal portion
			#; of RankOrScore if there is one remaining.
			If (tMain.RankOrScore'="")&&(..ApplyRankMultiplier=1) Set tMain.RankOrScore = tMain.RankOrScore * 100
			If tMain.RankOrScore["." Set tMain.RankOrScore = +$Piece(tMain.RankOrScore, ".", 1)
			
			Do tMatchResult.CopyFrom(tMain,tMatchResult)
			Set tMatchResult.Addresses=tMain.Addresses
			Set tMatchResult.Telecoms=tMain.Telecoms
			Set tMatchResult.Names=tMain.Names
			Set tMatchResult.MothersName=tMain.MothersName
			Set tMatchResult.FathersName=tMain.FathersName
			Set tMatchResult.SpousesName=tMain.SpousesName
			Do tFilteredResponse.Results.Insert(tMatchResult)
		}
			
	} catch eException {
		Set tSC=eException.AsStatus()
		Do ..Errors.logError("204","Error",$system.Status.GetErrorText(tSC)) 	
	}
	Quit tSC
AddID(pDomain, pID, pScopingCheck,pSearchRequest)	///
	If $D($$$aryTemp("ID",$s(pDomain="":" ",1:pDomain),$s(pID="":" ",1:pID))) Quit ""
	Set $$$aryTemp("ID",$s(pDomain="":" ",1:pDomain),$s(pID="":" ",1:pID))=""
	If '$d($$$aryTemp("Type",$s(pDomain="":" ",1:pDomain))) {
		&sql(select ID from hs_assignauth.config where code=:pDomain and IdentifierType='MR')
		Set $$$aryTemp("Type",$s(pDomain="":" ",1:pDomain))=$S(SQLCODE:"IDENT",1:"PAT")
	}
	If pScopingCheck && 'pSearchRequest.AdditionalInfo.IsDefined("scopingOrganization_"_pDomain) Quit ""
	Set tMatch = ##class(HS.Message.IHE.Match).%New()
	Set tMatch.AssigningAuthority=pDomain
	Set tMatch.MRN =pID
	Set tMatch.AssigningAuthorityType=$$$aryTemp("Type",$s(pDomain="":" ",1:pDomain))
	Set tMatch.AssigningAuthorityScopingOrganization = pDomain
	Set $$$aryTemp("ID",$s(pDomain="":" ",1:pDomain),$s(pID="":" ",1:pID))=1
	Quit tMatch
}

}
