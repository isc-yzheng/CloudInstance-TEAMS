Class HS.FHIR.DTL.ToSDA.Procedure Extends Ens.DataTransformDTL [ DependsOn = (HS.FHIR.vDSTU2.Model.Resource.Procedure, HS.SDA3.Procedure) ]
{

Parameter IGNOREMISSINGSOURCE = 1;

Parameter REPORTERRORS = 1;

Parameter TREATEMPTYREPEATINGFIELDASNULL = 0;

XData DTL [ XMLNamespace = "http://www.intersystems.com/dtl" ]
{
<transform sourceClass='HS.FHIR.vDSTU2.Model.Resource.Procedure' targetClass='HS.SDA3.Procedure' create='new' language='objectscript' >
<annotation>This transform uses the reserved DTL input parameter named &#39;aux&#39;.
For this transform, aux is a local array of strings.  The values held in aux were generated by the FHIR to SDA DTL framework prior to calling into this transform.
aux("EncounterNumbers", fhir_resource_id) = SDA EncounterNumber to use for the encounter pointed to by the FHIR resource.</annotation>
<if condition='source.identifier.Count()&gt;0' >
<true>
<assign value='source.identifier.(1).value.value' property='target.ExternalId' action='set' />
</true>
</if>
<assign value='source.code.text.value' property='target.Procedure.OriginalText' action='set' />
<if condition='($IsObject(source.code.coding)) &amp;&amp; (source.code.coding.Count() &gt; 0)' >
<true>
<assign value='source.code.coding.(1).display.value' property='target.Procedure.Description' action='set' />
<assign value='source.code.coding.(1).code.value' property='target.Procedure.Code' action='set' />
<assign value='source.code.coding.(1).version.value' property='target.Procedure.CodeSystemVersionId' action='set' />
<assign value='##class(HS.FHIR.DTL.Utils).GetCodeForURI(source.code.coding.(1).system.value)' property='target.Procedure.SDACodingStandard' action='set' />
</true>
</if>
<assign value='##class(HS.FHIR.DTL.Utils).NormalizeTimeStamp(source.performedPeriod.start.value)' property='target.FromTime' action='set' />
<assign value='##class(HS.FHIR.DTL.Utils).NormalizeTimeStamp(source.performedPeriod.end.value)' property='target.ToTime' action='set' />
<assign value='##class(HS.FHIR.DTL.Utils).NormalizeTimeStamp(source.performedDateTime.value)' property='target.ProcedureTime' action='set' />
<if condition='..Piece(source.encounter.reference.value,"Encounter/",2) &apos;= ""' >
<true>
<assign value='$G(aux("EncounterNumbers",..Piece(source.encounter.reference.value,"Encounter/",2)))' property='target.EncounterNumber' action='set' />
</true>
</if>
<code>
<![CDATA[ set iClinician = 1]]></code>
<foreach property='source.performer()' key='k2' >
<if condition='..StartsWith(source.performer.(k2).actor.reference.value,"#")' >
<true>
<code>
<![CDATA[ set iContained = 1]]></code>
<foreach property='source.contained()' key='k3' >
<if condition='("#"_source.contained.(iContained).Practitioner.id.value = source.performer.(k2).actor.reference.value) &amp;&amp; (iClinician = 1)' >
<true>
<subtransform class='HS.FHIR.DTL.ToSDA.SubTransform.Practitioner' targetObj='target.Clinician' sourceObj='source.contained.(iContained).Practitioner' />
<code>
<![CDATA[ set iClinician = 0]]></code>
</true>
</if>
<code>
<![CDATA[ set iContained = iContained + 1]]></code>
</foreach>
</true>
</if>
</foreach>
</transform>
}

}
