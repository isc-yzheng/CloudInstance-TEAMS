/// Import the HL7 to SDA mapping file generated by HL7ToSDAMapper 
/// and store them to database for searching.
Class HS.Doc.Mapping.ImportHL7ToSDAMapping [ Abstract ]
{

ClassMethod XMLImport(Path As %String, KeepCurrentData As %Boolean = 0, displayDetail As %Boolean = 0) As %Status
{
	Set status = $$$OK
	
	Try
	{
		If Path="" Set status = $$$ERROR($$$GeneralError,"Input file not specified") Quit
		
		If '##class(%File).Exists(Path) Set status = $$$ERROR($$$FileDoesNotExist,Path) Quit
		
		Set reader = ##class(%XML.Reader).%New()
		Set status = reader.OpenFile(Path)
		If $$$ISERR(status) Quit
		
		Do reader.Correlate("HealthShareMapping","HS.Doc.Mapping.Common.HealthShareMapping")
		If reader.Next(.tMapping,.status) {
			Set status = ..ParseHSMapping(tMapping,KeepCurrentData,displayDetail)
		}
		Else {
			Set status = $$$ERROR($$$GeneralError,Path_" does not contain HealthShareMapping")
		}
	}
	Catch ex
	{
		Set status = ex.AsStatus()
	}
	
	If $$$ISERR(status) Write !,$System.Status.GetErrorText(status),!!
	
	Quit status
}

ClassMethod ParseHSMapping(pMapping As HS.Doc.Mapping.Common.HealthShareMapping, KeepCurrentData As %Boolean, displayDetail As %Boolean) As %Status
{
	
	Set status = $$$OK
	
	Try
	{
		Kill ^||tErrors
		
		Set linkCounter = 0
		Set targetCounter = 0
		Set sourceCounter = 0

		If 'KeepCurrentData {
			W !, "Initialize HS.Doc.Data.Field table."
			Do ##class(HS.Doc.Data.Field).%DeleteExtent()
			W !, "Initialize HS.Doc.Data.Link table.", !
			Do ##class(HS.Doc.Data.Link).%DeleteExtent()
		}
		
		For i=1:1:pMapping.Mappings.Count() {
			W:displayDetail "."
			Set currentMapping = pMapping.Mappings.GetAt(i)
			For j=1:1:currentMapping.Target.Count() {
				Set currentTarget = currentMapping.Target.GetAt(j)
				For k=1:1:currentTarget.Field.Count() {
					Set currentField = currentTarget.Field.GetAt(k)
					
					// For each <Field>, build Target field.
					Set newTarget = ##class(HS.Doc.Data.Field).%New()
					Set newTarget.DocumentType = "SDA"
					
					// path = Target.Streamlet + Target.Root + Field.Path
					// Example: HS.SDA3.Allergy.Severity.Description/text() ... that gets trimmed to HS.SDA3.Allergy.Severity.Description
					Set newTarget.Path = currentTarget.Streamlet _ "." _ currentTarget.Root _ "." _ currentField.Path
					Set newTarget.Path = ..TrimPath(newTarget.Path)
										
					s currentTargetFieldId = ..GetCurrentFieldId(newTarget.DocumentType,newTarget.Path,displayDetail,"target")
					If 'currentTargetFieldId {
						Set tSaveStatus = newTarget.%Save()
						If $$$ISERR(tSaveStatus) Do ..LogError("ParseHSMapping newTarget.%Save() failed - "_$system.Status.GetErrorText(tSaveStatus))
						Set targetCounter = targetCounter + 1
					}
					else
					{
						Set newTarget=##class(HS.Doc.Data.Field).%OpenId(currentTargetFieldId)
					}
					
					For l=1:1:currentField.Source.Count() {
						Set currentSource = currentField.Source.GetAt(l)
						
						// For each <Source>, build Source field.
						Set newSource = ##class(HS.Doc.Data.Field).%New()
						Set newSource.DocumentType = "HL7"
						// Parse the HL7 source path
						Set newSource.Path = ..ParseHL7SourcePath(currentSource)
						
						Set currentSourceFieldId = ..GetCurrentFieldId(newSource.DocumentType,newSource.Path,displayDetail,"source")
						If 'currentSourceFieldId
						{
							Set tSaveStatus = newSource.%Save()
							If $$$ISERR(tSaveStatus) Do ..LogError("ParseHSMapping newSource.%Save() failed - "_$system.Status.GetErrorText(tSaveStatus))
							Set sourceCounter = sourceCounter + 1
						}
						else
						{	
							Set newSource=##class(HS.Doc.Data.Field).%OpenId(currentSourceFieldId)
						}
						set targetNote = ..fixCRLF(currentTarget.Note)
						set fieldNote = ..fixCRLF(currentField.Note)
						set sourceNote = ..fixCRLF(currentSource.Note)
						if ((targetNote '= "") && ($f(fieldNote, targetNote))) { 
							set targetNote = "" // skip duplicate first line
						}
						Set tNote=$s(targetNote'="":targetNote,1:"")
						Set tNote=$s(fieldNote'="":tNote_fieldNote,1:tNote)
						Set tNote=$s(sourceNote'="":tNote_sourceNote,1:tNote)
						Set currentPairId = ..GetCurrentPairId(newSource.%Id(),newTarget.%Id(),displayDetail)
						If 'currentPairId {
							// Build link to connect Target and Source.
							Set newLink = ##class(HS.Doc.Data.Link).%New()
							Set newLink.SourceField = newSource
							Set newLink.TargetField = newTarget
							Set newLink.MappingName = pMapping.name
							Set newLink.Comment = tNote
							Set tSaveStatus = newLink.%Save()
							If $$$ISERR(tSaveStatus) Do ..LogError("ParseHSMapping newLink.%Save() failed - "_$system.Status.GetErrorText(tSaveStatus))
							Set linkCounter = linkCounter + 1
							If displayDetail {
								w !,"  Source Path  = ",newSource.Path
								w !,"  Target Path  = ",newTarget.Path
								If newLink.Comment'="" w !,"  Link Comment = ",tNote
								w !
							}
							//If newTarget.Path="HS.SDA3.Allergy.ActionCode" w !,"  Link Comment = ",tNote,!
						}
					}
				}
			}
		}
		
		//If displayDetail {
			W !!, "Import of HL7 to SDA mapping finished"
			If $g(^||tErrors)>0 {
				w !!,"        Errors: ",?16,^||tErrors
				for i=1:1:^||tErrors w !,?16,^||tErrors(i)
				w !
				// If we don't already have a failure status then put the last error into status.
				If $$$ISOK(status) Set status = $$$ERROR($$$GeneralError,^||tErrors(^||tErrors))
			}
			W !, "Links: ",  ?16,   linkCounter
			W !, "Targets: ",?16, targetCounter
			W !, "Sources: ",?16, sourceCounter
			W !
		//}
	}
	Catch ex
	{
		Set status = ex.AsStatus()
	}
	
	Quit status
}

ClassMethod TrimPath(Path As %String)
{
	If (Path [ "text()") {
		Set Path = $extract(Path, 1, $length(Path) - 7)
	}
	Return Path
}

ClassMethod ParseHL7SourcePath(Source As HS.Doc.Mapping.HL7.SourceField)
{
	Return Source.Segment_"-"_Source.Field.Number
}

ClassMethod fixCRLF(tString As %String) As %String
{
	If $replace(tString,$c(10),"")="" Quit ""
	
	Quit $replace(tString,$c(10),$c(10,13))
}

ClassMethod GetCurrentFieldId(pDocumentType As %String, pPath As %String, displayDetail As %Boolean = 0, FieldType As %String) As %String
{
	s currentFieldId=0
	
	Set query =         "SELECT *"
	Set query = query _ " FROM HS_Doc_Data.Field"
	Set query = query _ " WHERE DocumentType = ? AND Path = ?"
	Set rs = ##class(%SQL.Statement).%ExecDirect(, query,pDocumentType,pPath)
	
	While (rs.%Next()) {
		If displayDetail W !, "    Found ",FieldType," duplicate: ","HS_Doc_Data.Field ID = ",rs.ID," (DocumentType=",rs.DocumentType,", Path=",rs.Path,")"
		s currentFieldId = rs.ID
	}
	Quit currentFieldId
}

ClassMethod GetCurrentPairId(pSourceFieldId As %String, pTargetFieldId As %String, displayDetail As %Boolean = 0) As %String
{
	s currentPairId=0
	
	Set query =         "SELECT *"
	Set query = query _ " FROM HS_Doc_Data.Link"
	Set query = query _ " WHERE SourceField	= ? AND TargetField = ?"
	Set rs = ##class(%SQL.Statement).%ExecDirect(, query, pSourceFieldId, pTargetFieldId)
	
	While (rs.%Next()) {
		If displayDetail W !,?10,"Found Pair duplicate: ","HS_Doc_Data.Link ID = ",rs.ID," (SourceField=",rs.SourceField,", TargetField=",rs.TargetField,")"
		s currentPairId = rs.ID
	}
	Quit currentPairId
}

ClassMethod LogError(pErrorMessage)
{
	Set ^||tErrors($i(^||tErrors))=pErrorMessage
	Quit
}

}
